{
    "version": {
        "major": "1",
        "minor": "3"
    },
    "domains": [
        {
            "domain": "Accessibility",
            "experimental": true,
            "dependencies": [
                "DOM"
            ],
            "types": [
                {
                    "id": "AXNodeId",
                    "description": "Unique accessibility node identifier.",
                    "type": "string"
                },
                {
                    "id": "AXValueType",
                    "description": "Enum of possible property types.",
                    "type": "string",
                    "enum": [
                        "boolean",
                        "tristate",
                        "booleanOrUndefined",
                        "idref",
                        "idrefList",
                        "integer",
                        "node",
                        "nodeList",
                        "number",
                        "string",
                        "computedString",
                        "token",
                        "tokenList",
                        "domRelation",
                        "role",
                        "internalRole",
                        "valueUndefined"
                    ]
                },
                {
                    "id": "AXValueSourceType",
                    "description": "Enum of possible property sources.",
                    "type": "string",
                    "enum": [
                        "attribute",
                        "implicit",
                        "style",
                        "contents",
                        "placeholder",
                        "relatedElement"
                    ]
                },
                {
                    "id": "AXValueNativeSourceType",
                    "description": "Enum of possible native property sources (as a subtype of a particular AXValueSourceType).",
                    "type": "string",
                    "enum": [
                        "figcaption",
                        "label",
                        "labelfor",
                        "labelwrapped",
                        "legend",
                        "rubyannotation",
                        "tablecaption",
                        "title",
                        "other"
                    ]
                },
                {
                    "id": "AXValueSource",
                    "description": "A single source for a computed AX property.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "type",
                            "description": "What type of source this is.",
                            "$ref": "AXValueSourceType"
                        },
                        {
                            "name": "value",
                            "description": "The value of this property source.",
                            "optional": true,
                            "$ref": "AXValue"
                        },
                        {
                            "name": "attribute",
                            "description": "The name of the relevant attribute, if any.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "attributeValue",
                            "description": "The value of the relevant attribute, if any.",
                            "optional": true,
                            "$ref": "AXValue"
                        },
                        {
                            "name": "superseded",
                            "description": "Whether this source is superseded by a higher priority source.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "nativeSource",
                            "description": "The native markup source for this value, e.g. a <label> element.",
                            "optional": true,
                            "$ref": "AXValueNativeSourceType"
                        },
                        {
                            "name": "nativeSourceValue",
                            "description": "The value, such as a node or node list, of the native source.",
                            "optional": true,
                            "$ref": "AXValue"
                        },
                        {
                            "name": "invalid",
                            "description": "Whether the value for this property is invalid.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "invalidReason",
                            "description": "Reason for the value being invalid, if it is.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "AXRelatedNode",
                    "type": "object",
                    "properties": [
                        {
                            "name": "backendDOMNodeId",
                            "description": "The BackendNodeId of the related DOM node.",
                            "$ref": "DOM.BackendNodeId"
                        },
                        {
                            "name": "idref",
                            "description": "The IDRef value provided, if any.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "text",
                            "description": "The text alternative of this node in the current context.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "AXProperty",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "The name of this property.",
                            "$ref": "AXPropertyName"
                        },
                        {
                            "name": "value",
                            "description": "The value of this property.",
                            "$ref": "AXValue"
                        }
                    ]
                },
                {
                    "id": "AXValue",
                    "description": "A single computed AX property.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "type",
                            "description": "The type of this value.",
                            "$ref": "AXValueType"
                        },
                        {
                            "name": "value",
                            "description": "The computed value of this property.",
                            "optional": true,
                            "type": "any"
                        },
                        {
                            "name": "relatedNodes",
                            "description": "One or more related nodes, if applicable.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "AXRelatedNode"
                            }
                        },
                        {
                            "name": "sources",
                            "description": "The sources which contributed to the computation of this property.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "AXValueSource"
                            }
                        }
                    ]
                },
                {
                    "id": "AXPropertyName",
                    "description": "Values of AXProperty name:\n- from 'busy' to 'roledescription': states which apply to every AX node\n- from 'live' to 'root': attributes which apply to nodes in live regions\n- from 'autocomplete' to 'valuetext': attributes which apply to widgets\n- from 'checked' to 'selected': states which apply to widgets\n- from 'activedescendant' to 'owns' - relationships between elements other than parent/child/sibling.",
                    "type": "string",
                    "enum": [
                        "busy",
                        "disabled",
                        "editable",
                        "focusable",
                        "focused",
                        "hidden",
                        "hiddenRoot",
                        "invalid",
                        "keyshortcuts",
                        "settable",
                        "roledescription",
                        "live",
                        "atomic",
                        "relevant",
                        "root",
                        "autocomplete",
                        "hasPopup",
                        "level",
                        "multiselectable",
                        "orientation",
                        "multiline",
                        "readonly",
                        "required",
                        "valuemin",
                        "valuemax",
                        "valuetext",
                        "checked",
                        "expanded",
                        "modal",
                        "pressed",
                        "selected",
                        "activedescendant",
                        "controls",
                        "describedby",
                        "details",
                        "errormessage",
                        "flowto",
                        "labelledby",
                        "owns"
                    ]
                },
                {
                    "id": "AXNode",
                    "description": "A node in the accessibility tree.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "nodeId",
                            "description": "Unique identifier for this node.",
                            "$ref": "AXNodeId"
                        },
                        {
                            "name": "ignored",
                            "description": "Whether this node is ignored for accessibility",
                            "type": "boolean"
                        },
                        {
                            "name": "ignoredReasons",
                            "description": "Collection of reasons why this node is hidden.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "AXProperty"
                            }
                        },
                        {
                            "name": "role",
                            "description": "This `Node`'s role, whether explicit or implicit.",
                            "optional": true,
                            "$ref": "AXValue"
                        },
                        {
                            "name": "name",
                            "description": "The accessible name for this `Node`.",
                            "optional": true,
                            "$ref": "AXValue"
                        },
                        {
                            "name": "description",
                            "description": "The accessible description for this `Node`.",
                            "optional": true,
                            "$ref": "AXValue"
                        },
                        {
                            "name": "value",
                            "description": "The value for this `Node`.",
                            "optional": true,
                            "$ref": "AXValue"
                        },
                        {
                            "name": "properties",
                            "description": "All other properties",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "AXProperty"
                            }
                        },
                        {
                            "name": "childIds",
                            "description": "IDs for each of this node's child nodes.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "AXNodeId"
                            }
                        },
                        {
                            "name": "backendDOMNodeId",
                            "description": "The backend ID for the associated DOM node, if any.",
                            "optional": true,
                            "$ref": "DOM.BackendNodeId"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "disable",
                    "description": "Disables the accessibility domain."
                },
                {
                    "name": "enable",
                    "description": "Enables the accessibility domain which causes `AXNodeId`s to remain consistent between method calls.\nThis turns on accessibility for the page, which can impact performance until accessibility is disabled."
                },
                {
                    "name": "getPartialAXTree",
                    "description": "Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node to get the partial accessibility tree for.",
                            "optional": true,
                            "$ref": "DOM.NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Identifier of the backend node to get the partial accessibility tree for.",
                            "optional": true,
                            "$ref": "DOM.BackendNodeId"
                        },
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper to get the partial accessibility tree for.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObjectId"
                        },
                        {
                            "name": "fetchRelatives",
                            "description": "Whether to fetch this nodes ancestors, siblings and children. Defaults to true.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodes",
                            "description": "The `Accessibility.AXNode` for this DOM node, if it exists, plus its ancestors, siblings and\nchildren, if requested.",
                            "type": "array",
                            "items": {
                                "$ref": "AXNode"
                            }
                        }
                    ]
                },
                {
                    "name": "getFullAXTree",
                    "description": "Fetches the entire accessibility tree for the root Document",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "max_depth",
                            "description": "The maximum depth at which descendants of the root node should be retrieved.\nIf omitted, the full tree is returned.",
                            "optional": true,
                            "type": "integer"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodes",
                            "type": "array",
                            "items": {
                                "$ref": "AXNode"
                            }
                        }
                    ]
                },
                {
                    "name": "getChildAXNodes",
                    "description": "Fetches a particular accessibility node by AXNodeId.\nRequires `enable()` to have been called previously.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "id",
                            "$ref": "AXNodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodes",
                            "type": "array",
                            "items": {
                                "$ref": "AXNode"
                            }
                        }
                    ]
                },
                {
                    "name": "queryAXTree",
                    "description": "Query a DOM node's accessibility subtree for accessible name and role.\nThis command computes the name and role for all nodes in the subtree, including those that are\nignored for accessibility, and returns those that mactch the specified name and role. If no DOM\nnode is specified, or the DOM node does not exist, the command returns an error. If neither\n`accessibleName` or `role` is specified, it returns all the accessibility nodes in the subtree.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node for the root to query.",
                            "optional": true,
                            "$ref": "DOM.NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Identifier of the backend node for the root to query.",
                            "optional": true,
                            "$ref": "DOM.BackendNodeId"
                        },
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper for the root to query.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObjectId"
                        },
                        {
                            "name": "accessibleName",
                            "description": "Find nodes with this computed name.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "role",
                            "description": "Find nodes with this computed role.",
                            "optional": true,
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodes",
                            "description": "A list of `Accessibility.AXNode` matching the specified attributes,\nincluding nodes that are ignored for accessibility.",
                            "type": "array",
                            "items": {
                                "$ref": "AXNode"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Animation",
            "experimental": true,
            "dependencies": [
                "Runtime",
                "DOM"
            ],
            "types": [
                {
                    "id": "Animation",
                    "description": "Animation instance.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "id",
                            "description": "`Animation`'s id.",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "description": "`Animation`'s name.",
                            "type": "string"
                        },
                        {
                            "name": "pausedState",
                            "description": "`Animation`'s internal paused state.",
                            "type": "boolean"
                        },
                        {
                            "name": "playState",
                            "description": "`Animation`'s play state.",
                            "type": "string"
                        },
                        {
                            "name": "playbackRate",
                            "description": "`Animation`'s playback rate.",
                            "type": "number"
                        },
                        {
                            "name": "startTime",
                            "description": "`Animation`'s start time.",
                            "type": "number"
                        },
                        {
                            "name": "currentTime",
                            "description": "`Animation`'s current time.",
                            "type": "number"
                        },
                        {
                            "name": "type",
                            "description": "Animation type of `Animation`.",
                            "type": "string",
                            "enum": [
                                "CSSTransition",
                                "CSSAnimation",
                                "WebAnimation"
                            ]
                        },
                        {
                            "name": "source",
                            "description": "`Animation`'s source animation node.",
                            "optional": true,
                            "$ref": "AnimationEffect"
                        },
                        {
                            "name": "cssId",
                            "description": "A unique ID for `Animation` representing the sources that triggered this CSS\nanimation/transition.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "AnimationEffect",
                    "description": "AnimationEffect instance",
                    "type": "object",
                    "properties": [
                        {
                            "name": "delay",
                            "description": "`AnimationEffect`'s delay.",
                            "type": "number"
                        },
                        {
                            "name": "endDelay",
                            "description": "`AnimationEffect`'s end delay.",
                            "type": "number"
                        },
                        {
                            "name": "iterationStart",
                            "description": "`AnimationEffect`'s iteration start.",
                            "type": "number"
                        },
                        {
                            "name": "iterations",
                            "description": "`AnimationEffect`'s iterations.",
                            "type": "number"
                        },
                        {
                            "name": "duration",
                            "description": "`AnimationEffect`'s iteration duration.",
                            "type": "number"
                        },
                        {
                            "name": "direction",
                            "description": "`AnimationEffect`'s playback direction.",
                            "type": "string"
                        },
                        {
                            "name": "fill",
                            "description": "`AnimationEffect`'s fill mode.",
                            "type": "string"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "`AnimationEffect`'s target node.",
                            "optional": true,
                            "$ref": "DOM.BackendNodeId"
                        },
                        {
                            "name": "keyframesRule",
                            "description": "`AnimationEffect`'s keyframes.",
                            "optional": true,
                            "$ref": "KeyframesRule"
                        },
                        {
                            "name": "easing",
                            "description": "`AnimationEffect`'s timing function.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "KeyframesRule",
                    "description": "Keyframes Rule",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "CSS keyframed animation's name.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "keyframes",
                            "description": "List of animation keyframes.",
                            "type": "array",
                            "items": {
                                "$ref": "KeyframeStyle"
                            }
                        }
                    ]
                },
                {
                    "id": "KeyframeStyle",
                    "description": "Keyframe Style",
                    "type": "object",
                    "properties": [
                        {
                            "name": "offset",
                            "description": "Keyframe's time offset.",
                            "type": "string"
                        },
                        {
                            "name": "easing",
                            "description": "`AnimationEffect`'s timing function.",
                            "type": "string"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "disable",
                    "description": "Disables animation domain notifications."
                },
                {
                    "name": "enable",
                    "description": "Enables animation domain notifications."
                },
                {
                    "name": "getCurrentTime",
                    "description": "Returns the current time of the an animation.",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Id of animation.",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "currentTime",
                            "description": "Current time of the page.",
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "getPlaybackRate",
                    "description": "Gets the playback rate of the document timeline.",
                    "returns": [
                        {
                            "name": "playbackRate",
                            "description": "Playback rate for animations on page.",
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "releaseAnimations",
                    "description": "Releases a set of animations to no longer be manipulated.",
                    "parameters": [
                        {
                            "name": "animations",
                            "description": "List of animation ids to seek.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveAnimation",
                    "description": "Gets the remote object of the Animation.",
                    "parameters": [
                        {
                            "name": "animationId",
                            "description": "Animation id.",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "remoteObject",
                            "description": "Corresponding remote object.",
                            "$ref": "Runtime.RemoteObject"
                        }
                    ]
                },
                {
                    "name": "seekAnimations",
                    "description": "Seek a set of animations to a particular time within each animation.",
                    "parameters": [
                        {
                            "name": "animations",
                            "description": "List of animation ids to seek.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "currentTime",
                            "description": "Set the current time of each animation.",
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "setPaused",
                    "description": "Sets the paused state of a set of animations.",
                    "parameters": [
                        {
                            "name": "animations",
                            "description": "Animations to set the pause state of.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "paused",
                            "description": "Paused state to set to.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "setPlaybackRate",
                    "description": "Sets the playback rate of the document timeline.",
                    "parameters": [
                        {
                            "name": "playbackRate",
                            "description": "Playback rate for animations on page",
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "setTiming",
                    "description": "Sets the timing of an animation node.",
                    "parameters": [
                        {
                            "name": "animationId",
                            "description": "Animation id.",
                            "type": "string"
                        },
                        {
                            "name": "duration",
                            "description": "Duration of the animation.",
                            "type": "number"
                        },
                        {
                            "name": "delay",
                            "description": "Delay of the animation.",
                            "type": "number"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "animationCanceled",
                    "description": "Event for when an animation has been cancelled.",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Id of the animation that was cancelled.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "animationCreated",
                    "description": "Event for each animation that has been created.",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Id of the animation that was created.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "animationStarted",
                    "description": "Event for animation that has been started.",
                    "parameters": [
                        {
                            "name": "animation",
                            "description": "Animation that was started.",
                            "$ref": "Animation"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "ApplicationCache",
            "experimental": true,
            "dependencies": [
                "Page"
            ],
            "types": [
                {
                    "id": "ApplicationCacheResource",
                    "description": "Detailed application cache resource information.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "url",
                            "description": "Resource url.",
                            "type": "string"
                        },
                        {
                            "name": "size",
                            "description": "Resource size.",
                            "type": "integer"
                        },
                        {
                            "name": "type",
                            "description": "Resource type.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "ApplicationCache",
                    "description": "Detailed application cache information.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "manifestURL",
                            "description": "Manifest URL.",
                            "type": "string"
                        },
                        {
                            "name": "size",
                            "description": "Application cache size.",
                            "type": "number"
                        },
                        {
                            "name": "creationTime",
                            "description": "Application cache creation time.",
                            "type": "number"
                        },
                        {
                            "name": "updateTime",
                            "description": "Application cache update time.",
                            "type": "number"
                        },
                        {
                            "name": "resources",
                            "description": "Application cache resources.",
                            "type": "array",
                            "items": {
                                "$ref": "ApplicationCacheResource"
                            }
                        }
                    ]
                },
                {
                    "id": "FrameWithManifest",
                    "description": "Frame identifier - manifest URL pair.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "frameId",
                            "description": "Frame identifier.",
                            "$ref": "Page.FrameId"
                        },
                        {
                            "name": "manifestURL",
                            "description": "Manifest URL.",
                            "type": "string"
                        },
                        {
                            "name": "status",
                            "description": "Application cache status.",
                            "type": "integer"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "enable",
                    "description": "Enables application cache domain notifications."
                },
                {
                    "name": "getApplicationCacheForFrame",
                    "description": "Returns relevant application cache data for the document in given frame.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "description": "Identifier of the frame containing document whose application cache is retrieved.",
                            "$ref": "Page.FrameId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "applicationCache",
                            "description": "Relevant application cache data for the document in given frame.",
                            "$ref": "ApplicationCache"
                        }
                    ]
                },
                {
                    "name": "getFramesWithManifests",
                    "description": "Returns array of frame identifiers with manifest urls for each frame containing a document\nassociated with some application cache.",
                    "returns": [
                        {
                            "name": "frameIds",
                            "description": "Array of frame identifiers with manifest urls for each frame containing a document\nassociated with some application cache.",
                            "type": "array",
                            "items": {
                                "$ref": "FrameWithManifest"
                            }
                        }
                    ]
                },
                {
                    "name": "getManifestForFrame",
                    "description": "Returns manifest URL for document in the given frame.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "description": "Identifier of the frame containing document whose manifest is retrieved.",
                            "$ref": "Page.FrameId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "manifestURL",
                            "description": "Manifest URL for document in the given frame.",
                            "type": "string"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "applicationCacheStatusUpdated",
                    "parameters": [
                        {
                            "name": "frameId",
                            "description": "Identifier of the frame containing document whose application cache updated status.",
                            "$ref": "Page.FrameId"
                        },
                        {
                            "name": "manifestURL",
                            "description": "Manifest URL.",
                            "type": "string"
                        },
                        {
                            "name": "status",
                            "description": "Updated application cache status.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "name": "networkStateUpdated",
                    "parameters": [
                        {
                            "name": "isNowOnline",
                            "type": "boolean"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Audits",
            "description": "Audits domain allows investigation of page violations and possible improvements.",
            "experimental": true,
            "dependencies": [
                "Network"
            ],
            "types": [
                {
                    "id": "AffectedCookie",
                    "description": "Information about a cookie that is affected by an inspector issue.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "The following three properties uniquely identify a cookie",
                            "type": "string"
                        },
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "domain",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "AffectedRequest",
                    "description": "Information about a request that is affected by an inspector issue.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "requestId",
                            "description": "The unique request id.",
                            "$ref": "Network.RequestId"
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "AffectedFrame",
                    "description": "Information about the frame affected by an inspector issue.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "frameId",
                            "$ref": "Page.FrameId"
                        }
                    ]
                },
                {
                    "id": "SameSiteCookieExclusionReason",
                    "type": "string",
                    "enum": [
                        "ExcludeSameSiteUnspecifiedTreatedAsLax",
                        "ExcludeSameSiteNoneInsecure",
                        "ExcludeSameSiteLax",
                        "ExcludeSameSiteStrict"
                    ]
                },
                {
                    "id": "SameSiteCookieWarningReason",
                    "type": "string",
                    "enum": [
                        "WarnSameSiteUnspecifiedCrossSiteContext",
                        "WarnSameSiteNoneInsecure",
                        "WarnSameSiteUnspecifiedLaxAllowUnsafe",
                        "WarnSameSiteStrictLaxDowngradeStrict",
                        "WarnSameSiteStrictCrossDowngradeStrict",
                        "WarnSameSiteStrictCrossDowngradeLax",
                        "WarnSameSiteLaxCrossDowngradeStrict",
                        "WarnSameSiteLaxCrossDowngradeLax"
                    ]
                },
                {
                    "id": "SameSiteCookieOperation",
                    "type": "string",
                    "enum": [
                        "SetCookie",
                        "ReadCookie"
                    ]
                },
                {
                    "id": "SameSiteCookieIssueDetails",
                    "description": "This information is currently necessary, as the front-end has a difficult\ntime finding a specific cookie. With this, we can convey specific error\ninformation without the cookie.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "cookie",
                            "$ref": "AffectedCookie"
                        },
                        {
                            "name": "cookieWarningReasons",
                            "type": "array",
                            "items": {
                                "$ref": "SameSiteCookieWarningReason"
                            }
                        },
                        {
                            "name": "cookieExclusionReasons",
                            "type": "array",
                            "items": {
                                "$ref": "SameSiteCookieExclusionReason"
                            }
                        },
                        {
                            "name": "operation",
                            "description": "Optionally identifies the site-for-cookies and the cookie url, which\nmay be used by the front-end as additional context.",
                            "$ref": "SameSiteCookieOperation"
                        },
                        {
                            "name": "siteForCookies",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "cookieUrl",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "request",
                            "optional": true,
                            "$ref": "AffectedRequest"
                        }
                    ]
                },
                {
                    "id": "MixedContentResolutionStatus",
                    "type": "string",
                    "enum": [
                        "MixedContentBlocked",
                        "MixedContentAutomaticallyUpgraded",
                        "MixedContentWarning"
                    ]
                },
                {
                    "id": "MixedContentResourceType",
                    "type": "string",
                    "enum": [
                        "Audio",
                        "Beacon",
                        "CSPReport",
                        "Download",
                        "EventSource",
                        "Favicon",
                        "Font",
                        "Form",
                        "Frame",
                        "Image",
                        "Import",
                        "Manifest",
                        "Ping",
                        "PluginData",
                        "PluginResource",
                        "Prefetch",
                        "Resource",
                        "Script",
                        "ServiceWorker",
                        "SharedWorker",
                        "Stylesheet",
                        "Track",
                        "Video",
                        "Worker",
                        "XMLHttpRequest",
                        "XSLT"
                    ]
                },
                {
                    "id": "MixedContentIssueDetails",
                    "type": "object",
                    "properties": [
                        {
                            "name": "resourceType",
                            "description": "The type of resource causing the mixed content issue (css, js, iframe,\nform,...). Marked as optional because it is mapped to from\nblink::mojom::RequestContextType, which will be replaced\nby network::mojom::RequestDestination",
                            "optional": true,
                            "$ref": "MixedContentResourceType"
                        },
                        {
                            "name": "resolutionStatus",
                            "description": "The way the mixed content issue is being resolved.",
                            "$ref": "MixedContentResolutionStatus"
                        },
                        {
                            "name": "insecureURL",
                            "description": "The unsafe http url causing the mixed content issue.",
                            "type": "string"
                        },
                        {
                            "name": "mainResourceURL",
                            "description": "The url responsible for the call to an unsafe url.",
                            "type": "string"
                        },
                        {
                            "name": "request",
                            "description": "The mixed content request.\nDoes not always exist (e.g. for unsafe form submission urls).",
                            "optional": true,
                            "$ref": "AffectedRequest"
                        },
                        {
                            "name": "frame",
                            "description": "Optional because not every mixed content issue is necessarily linked to a frame.",
                            "optional": true,
                            "$ref": "AffectedFrame"
                        }
                    ]
                },
                {
                    "id": "BlockedByResponseReason",
                    "description": "Enum indicating the reason a response has been blocked. These reasons are\nrefinements of the net error BLOCKED_BY_RESPONSE.",
                    "type": "string",
                    "enum": [
                        "CoepFrameResourceNeedsCoepHeader",
                        "CoopSandboxedIFrameCannotNavigateToCoopPage",
                        "CorpNotSameOrigin",
                        "CorpNotSameOriginAfterDefaultedToSameOriginByCoep",
                        "CorpNotSameSite"
                    ]
                },
                {
                    "id": "BlockedByResponseIssueDetails",
                    "description": "Details for a request that has been blocked with the BLOCKED_BY_RESPONSE\ncode. Currently only used for COEP/COOP, but may be extended to include\nsome CSP errors in the future.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "request",
                            "$ref": "AffectedRequest"
                        },
                        {
                            "name": "parentFrame",
                            "optional": true,
                            "$ref": "AffectedFrame"
                        },
                        {
                            "name": "blockedFrame",
                            "optional": true,
                            "$ref": "AffectedFrame"
                        },
                        {
                            "name": "reason",
                            "$ref": "BlockedByResponseReason"
                        }
                    ]
                },
                {
                    "id": "HeavyAdResolutionStatus",
                    "type": "string",
                    "enum": [
                        "HeavyAdBlocked",
                        "HeavyAdWarning"
                    ]
                },
                {
                    "id": "HeavyAdReason",
                    "type": "string",
                    "enum": [
                        "NetworkTotalLimit",
                        "CpuTotalLimit",
                        "CpuPeakLimit"
                    ]
                },
                {
                    "id": "HeavyAdIssueDetails",
                    "type": "object",
                    "properties": [
                        {
                            "name": "resolution",
                            "description": "The resolution status, either blocking the content or warning.",
                            "$ref": "HeavyAdResolutionStatus"
                        },
                        {
                            "name": "reason",
                            "description": "The reason the ad was blocked, total network or cpu or peak cpu.",
                            "$ref": "HeavyAdReason"
                        },
                        {
                            "name": "frame",
                            "description": "The frame that was blocked.",
                            "$ref": "AffectedFrame"
                        }
                    ]
                },
                {
                    "id": "ContentSecurityPolicyViolationType",
                    "type": "string",
                    "enum": [
                        "kInlineViolation",
                        "kEvalViolation",
                        "kURLViolation",
                        "kTrustedTypesSinkViolation",
                        "kTrustedTypesPolicyViolation"
                    ]
                },
                {
                    "id": "SourceCodeLocation",
                    "type": "object",
                    "properties": [
                        {
                            "name": "scriptId",
                            "optional": true,
                            "$ref": "Runtime.ScriptId"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "lineNumber",
                            "type": "integer"
                        },
                        {
                            "name": "columnNumber",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "ContentSecurityPolicyIssueDetails",
                    "type": "object",
                    "properties": [
                        {
                            "name": "blockedURL",
                            "description": "The url not included in allowed sources.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "violatedDirective",
                            "description": "Specific directive that is violated, causing the CSP issue.",
                            "type": "string"
                        },
                        {
                            "name": "isReportOnly",
                            "type": "boolean"
                        },
                        {
                            "name": "contentSecurityPolicyViolationType",
                            "$ref": "ContentSecurityPolicyViolationType"
                        },
                        {
                            "name": "frameAncestor",
                            "optional": true,
                            "$ref": "AffectedFrame"
                        },
                        {
                            "name": "sourceCodeLocation",
                            "optional": true,
                            "$ref": "SourceCodeLocation"
                        },
                        {
                            "name": "violatingNodeId",
                            "optional": true,
                            "$ref": "DOM.BackendNodeId"
                        }
                    ]
                },
                {
                    "id": "SharedArrayBufferIssueType",
                    "type": "string",
                    "enum": [
                        "TransferIssue",
                        "CreationIssue"
                    ]
                },
                {
                    "id": "SharedArrayBufferIssueDetails",
                    "description": "Details for a issue arising from an SAB being instantiated in, or\ntransfered to a context that is not cross-origin isolated.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "sourceCodeLocation",
                            "$ref": "SourceCodeLocation"
                        },
                        {
                            "name": "isWarning",
                            "type": "boolean"
                        },
                        {
                            "name": "type",
                            "$ref": "SharedArrayBufferIssueType"
                        }
                    ]
                },
                {
                    "id": "TwaQualityEnforcementViolationType",
                    "type": "string",
                    "enum": [
                        "kHttpError",
                        "kUnavailableOffline",
                        "kDigitalAssetLinks"
                    ]
                },
                {
                    "id": "TrustedWebActivityIssueDetails",
                    "type": "object",
                    "properties": [
                        {
                            "name": "url",
                            "description": "The url that triggers the violation.",
                            "type": "string"
                        },
                        {
                            "name": "violationType",
                            "$ref": "TwaQualityEnforcementViolationType"
                        },
                        {
                            "name": "httpStatusCode",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "packageName",
                            "description": "The package name of the Trusted Web Activity client app. This field is\nonly used when violation type is kDigitalAssetLinks.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "signature",
                            "description": "The signature of the Trusted Web Activity client app. This field is only\nused when violation type is kDigitalAssetLinks.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "LowTextContrastIssueDetails",
                    "type": "object",
                    "properties": [
                        {
                            "name": "violatingNodeId",
                            "$ref": "DOM.BackendNodeId"
                        },
                        {
                            "name": "violatingNodeSelector",
                            "type": "string"
                        },
                        {
                            "name": "contrastRatio",
                            "type": "number"
                        },
                        {
                            "name": "thresholdAA",
                            "type": "number"
                        },
                        {
                            "name": "thresholdAAA",
                            "type": "number"
                        },
                        {
                            "name": "fontSize",
                            "type": "string"
                        },
                        {
                            "name": "fontWeight",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "CorsIssueDetails",
                    "description": "Details for a CORS related issue, e.g. a warning or error related to\nCORS RFC1918 enforcement.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "corsErrorStatus",
                            "$ref": "Network.CorsErrorStatus"
                        },
                        {
                            "name": "isWarning",
                            "type": "boolean"
                        },
                        {
                            "name": "request",
                            "$ref": "AffectedRequest"
                        },
                        {
                            "name": "initiatorOrigin",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "resourceIPAddressSpace",
                            "optional": true,
                            "$ref": "Network.IPAddressSpace"
                        },
                        {
                            "name": "clientSecurityState",
                            "optional": true,
                            "$ref": "Network.ClientSecurityState"
                        }
                    ]
                },
                {
                    "id": "InspectorIssueCode",
                    "description": "A unique identifier for the type of issue. Each type may use one of the\noptional fields in InspectorIssueDetails to convey more specific\ninformation about the kind of issue.",
                    "type": "string",
                    "enum": [
                        "SameSiteCookieIssue",
                        "MixedContentIssue",
                        "BlockedByResponseIssue",
                        "HeavyAdIssue",
                        "ContentSecurityPolicyIssue",
                        "SharedArrayBufferIssue",
                        "TrustedWebActivityIssue",
                        "LowTextContrastIssue",
                        "CorsIssue"
                    ]
                },
                {
                    "id": "InspectorIssueDetails",
                    "description": "This struct holds a list of optional fields with additional information\nspecific to the kind of issue. When adding a new issue code, please also\nadd a new optional field to this type.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "sameSiteCookieIssueDetails",
                            "optional": true,
                            "$ref": "SameSiteCookieIssueDetails"
                        },
                        {
                            "name": "mixedContentIssueDetails",
                            "optional": true,
                            "$ref": "MixedContentIssueDetails"
                        },
                        {
                            "name": "blockedByResponseIssueDetails",
                            "optional": true,
                            "$ref": "BlockedByResponseIssueDetails"
                        },
                        {
                            "name": "heavyAdIssueDetails",
                            "optional": true,
                            "$ref": "HeavyAdIssueDetails"
                        },
                        {
                            "name": "contentSecurityPolicyIssueDetails",
                            "optional": true,
                            "$ref": "ContentSecurityPolicyIssueDetails"
                        },
                        {
                            "name": "sharedArrayBufferIssueDetails",
                            "optional": true,
                            "$ref": "SharedArrayBufferIssueDetails"
                        },
                        {
                            "name": "twaQualityEnforcementDetails",
                            "optional": true,
                            "$ref": "TrustedWebActivityIssueDetails"
                        },
                        {
                            "name": "lowTextContrastIssueDetails",
                            "optional": true,
                            "$ref": "LowTextContrastIssueDetails"
                        },
                        {
                            "name": "corsIssueDetails",
                            "optional": true,
                            "$ref": "CorsIssueDetails"
                        }
                    ]
                },
                {
                    "id": "InspectorIssue",
                    "description": "An inspector issue reported from the back-end.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "code",
                            "$ref": "InspectorIssueCode"
                        },
                        {
                            "name": "details",
                            "$ref": "InspectorIssueDetails"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "getEncodedResponse",
                    "description": "Returns the response body and size if it were re-encoded with the specified settings. Only\napplies to images.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "description": "Identifier of the network request to get content for.",
                            "$ref": "Network.RequestId"
                        },
                        {
                            "name": "encoding",
                            "description": "The encoding to use.",
                            "type": "string",
                            "enum": [
                                "webp",
                                "jpeg",
                                "png"
                            ]
                        },
                        {
                            "name": "quality",
                            "description": "The quality of the encoding (0-1). (defaults to 1)",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "sizeOnly",
                            "description": "Whether to only return the size information (defaults to false).",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "body",
                            "description": "The encoded body as a base64 string. Omitted if sizeOnly is true. (Encoded as a base64 string when passed over JSON)",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "originalSize",
                            "description": "Size before re-encoding.",
                            "type": "integer"
                        },
                        {
                            "name": "encodedSize",
                            "description": "Size after re-encoding.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "name": "disable",
                    "description": "Disables issues domain, prevents further issues from being reported to the client."
                },
                {
                    "name": "enable",
                    "description": "Enables issues domain, sends the issues collected so far to the client by means of the\n`issueAdded` event."
                },
                {
                    "name": "checkContrast",
                    "description": "Runs the contrast check for the target page. Found issues are reported\nusing Audits.issueAdded event.",
                    "parameters": [
                        {
                            "name": "reportAAA",
                            "description": "Whether to report WCAG AAA level issues. Default is false.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "issueAdded",
                    "parameters": [
                        {
                            "name": "issue",
                            "$ref": "InspectorIssue"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "BackgroundService",
            "description": "Defines events for background web platform features.",
            "experimental": true,
            "types": [
                {
                    "id": "ServiceName",
                    "description": "The Background Service that will be associated with the commands/events.\nEvery Background Service operates independently, but they share the same\nAPI.",
                    "type": "string",
                    "enum": [
                        "backgroundFetch",
                        "backgroundSync",
                        "pushMessaging",
                        "notifications",
                        "paymentHandler",
                        "periodicBackgroundSync"
                    ]
                },
                {
                    "id": "EventMetadata",
                    "description": "A key-value pair for additional event information to pass along.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "BackgroundServiceEvent",
                    "type": "object",
                    "properties": [
                        {
                            "name": "timestamp",
                            "description": "Timestamp of the event (in seconds).",
                            "$ref": "Network.TimeSinceEpoch"
                        },
                        {
                            "name": "origin",
                            "description": "The origin this event belongs to.",
                            "type": "string"
                        },
                        {
                            "name": "serviceWorkerRegistrationId",
                            "description": "The Service Worker ID that initiated the event.",
                            "$ref": "ServiceWorker.RegistrationID"
                        },
                        {
                            "name": "service",
                            "description": "The Background Service this event belongs to.",
                            "$ref": "ServiceName"
                        },
                        {
                            "name": "eventName",
                            "description": "A description of the event.",
                            "type": "string"
                        },
                        {
                            "name": "instanceId",
                            "description": "An identifier that groups related events together.",
                            "type": "string"
                        },
                        {
                            "name": "eventMetadata",
                            "description": "A list of event-specific information.",
                            "type": "array",
                            "items": {
                                "$ref": "EventMetadata"
                            }
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "startObserving",
                    "description": "Enables event updates for the service.",
                    "parameters": [
                        {
                            "name": "service",
                            "$ref": "ServiceName"
                        }
                    ]
                },
                {
                    "name": "stopObserving",
                    "description": "Disables event updates for the service.",
                    "parameters": [
                        {
                            "name": "service",
                            "$ref": "ServiceName"
                        }
                    ]
                },
                {
                    "name": "setRecording",
                    "description": "Set the recording state for the service.",
                    "parameters": [
                        {
                            "name": "shouldRecord",
                            "type": "boolean"
                        },
                        {
                            "name": "service",
                            "$ref": "ServiceName"
                        }
                    ]
                },
                {
                    "name": "clearEvents",
                    "description": "Clears all stored data for the service.",
                    "parameters": [
                        {
                            "name": "service",
                            "$ref": "ServiceName"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "recordingStateChanged",
                    "description": "Called when the recording state for the service has been updated.",
                    "parameters": [
                        {
                            "name": "isRecording",
                            "type": "boolean"
                        },
                        {
                            "name": "service",
                            "$ref": "ServiceName"
                        }
                    ]
                },
                {
                    "name": "backgroundServiceEventReceived",
                    "description": "Called with all existing backgroundServiceEvents when enabled, and all new\nevents afterwards if enabled and recording.",
                    "parameters": [
                        {
                            "name": "backgroundServiceEvent",
                            "$ref": "BackgroundServiceEvent"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Browser",
            "description": "The Browser domain defines methods and events for browser managing.",
            "types": [
                {
                    "id": "BrowserContextID",
                    "experimental": true,
                    "type": "string"
                },
                {
                    "id": "WindowID",
                    "experimental": true,
                    "type": "integer"
                },
                {
                    "id": "WindowState",
                    "description": "The state of the browser window.",
                    "experimental": true,
                    "type": "string",
                    "enum": [
                        "normal",
                        "minimized",
                        "maximized",
                        "fullscreen"
                    ]
                },
                {
                    "id": "Bounds",
                    "description": "Browser window bounds information",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        {
                            "name": "left",
                            "description": "The offset from the left edge of the screen to the window in pixels.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "top",
                            "description": "The offset from the top edge of the screen to the window in pixels.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "width",
                            "description": "The window width in pixels.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "height",
                            "description": "The window height in pixels.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "windowState",
                            "description": "The window state. Default to normal.",
                            "optional": true,
                            "$ref": "WindowState"
                        }
                    ]
                },
                {
                    "id": "PermissionType",
                    "experimental": true,
                    "type": "string",
                    "enum": [
                        "accessibilityEvents",
                        "audioCapture",
                        "backgroundSync",
                        "backgroundFetch",
                        "clipboardReadWrite",
                        "clipboardSanitizedWrite",
                        "displayCapture",
                        "durableStorage",
                        "flash",
                        "geolocation",
                        "midi",
                        "midiSysex",
                        "nfc",
                        "notifications",
                        "paymentHandler",
                        "periodicBackgroundSync",
                        "protectedMediaIdentifier",
                        "sensors",
                        "videoCapture",
                        "videoCapturePanTiltZoom",
                        "idleDetection",
                        "wakeLockScreen",
                        "wakeLockSystem"
                    ]
                },
                {
                    "id": "PermissionSetting",
                    "experimental": true,
                    "type": "string",
                    "enum": [
                        "granted",
                        "denied",
                        "prompt"
                    ]
                },
                {
                    "id": "PermissionDescriptor",
                    "description": "Definition of PermissionDescriptor defined in the Permissions API:\nhttps://w3c.github.io/permissions/#dictdef-permissiondescriptor.",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "Name of permission.\nSee https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl for valid permission names.",
                            "type": "string"
                        },
                        {
                            "name": "sysex",
                            "description": "For \"midi\" permission, may also specify sysex control.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "userVisibleOnly",
                            "description": "For \"push\" permission, may specify userVisibleOnly.\nNote that userVisibleOnly = true is the only currently supported type.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "allowWithoutSanitization",
                            "description": "For \"clipboard\" permission, may specify allowWithoutSanitization.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "panTiltZoom",
                            "description": "For \"camera\" permission, may specify panTiltZoom.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "BrowserCommandId",
                    "description": "Browser command ids used by executeBrowserCommand.",
                    "experimental": true,
                    "type": "string",
                    "enum": [
                        "openTabSearch",
                        "closeTabSearch"
                    ]
                },
                {
                    "id": "Bucket",
                    "description": "Chrome histogram bucket.",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        {
                            "name": "low",
                            "description": "Minimum value (inclusive).",
                            "type": "integer"
                        },
                        {
                            "name": "high",
                            "description": "Maximum value (exclusive).",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Number of samples.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "Histogram",
                    "description": "Chrome histogram.",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "Name.",
                            "type": "string"
                        },
                        {
                            "name": "sum",
                            "description": "Sum of sample values.",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Total number of samples.",
                            "type": "integer"
                        },
                        {
                            "name": "buckets",
                            "description": "Buckets.",
                            "type": "array",
                            "items": {
                                "$ref": "Bucket"
                            }
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "setPermission",
                    "description": "Set permission settings for given origin.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "permission",
                            "description": "Descriptor of permission to override.",
                            "$ref": "PermissionDescriptor"
                        },
                        {
                            "name": "setting",
                            "description": "Setting of the permission.",
                            "$ref": "PermissionSetting"
                        },
                        {
                            "name": "origin",
                            "description": "Origin the permission applies to, all origins if not specified.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "browserContextId",
                            "description": "Context to override. When omitted, default browser context is used.",
                            "optional": true,
                            "$ref": "BrowserContextID"
                        }
                    ]
                },
                {
                    "name": "grantPermissions",
                    "description": "Grant specific permissions to the given origin and reject all others.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "permissions",
                            "type": "array",
                            "items": {
                                "$ref": "PermissionType"
                            }
                        },
                        {
                            "name": "origin",
                            "description": "Origin the permission applies to, all origins if not specified.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "browserContextId",
                            "description": "BrowserContext to override permissions. When omitted, default browser context is used.",
                            "optional": true,
                            "$ref": "BrowserContextID"
                        }
                    ]
                },
                {
                    "name": "resetPermissions",
                    "description": "Reset all permission management for all origins.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "browserContextId",
                            "description": "BrowserContext to reset permissions. When omitted, default browser context is used.",
                            "optional": true,
                            "$ref": "BrowserContextID"
                        }
                    ]
                },
                {
                    "name": "setDownloadBehavior",
                    "description": "Set the behavior when downloading a file.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "behavior",
                            "description": "Whether to allow all or deny all download requests, or use default Chrome behavior if\navailable (otherwise deny). |allowAndName| allows download and names files according to\ntheir dowmload guids.",
                            "type": "string",
                            "enum": [
                                "deny",
                                "allow",
                                "allowAndName",
                                "default"
                            ]
                        },
                        {
                            "name": "browserContextId",
                            "description": "BrowserContext to set download behavior. When omitted, default browser context is used.",
                            "optional": true,
                            "$ref": "BrowserContextID"
                        },
                        {
                            "name": "downloadPath",
                            "description": "The default path to save downloaded files to. This is requred if behavior is set to 'allow'\nor 'allowAndName'.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "cancelDownload",
                    "description": "Cancel a download if in progress",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "guid",
                            "description": "Global unique identifier of the download.",
                            "type": "string"
                        },
                        {
                            "name": "browserContextId",
                            "description": "BrowserContext to perform the action in. When omitted, default browser context is used.",
                            "optional": true,
                            "$ref": "BrowserContextID"
                        }
                    ]
                },
                {
                    "name": "close",
                    "description": "Close browser gracefully."
                },
                {
                    "name": "crash",
                    "description": "Crashes browser on the main thread.",
                    "experimental": true
                },
                {
                    "name": "crashGpuProcess",
                    "description": "Crashes GPU process.",
                    "experimental": true
                },
                {
                    "name": "getVersion",
                    "description": "Returns version information.",
                    "returns": [
                        {
                            "name": "protocolVersion",
                            "description": "Protocol version.",
                            "type": "string"
                        },
                        {
                            "name": "product",
                            "description": "Product name.",
                            "type": "string"
                        },
                        {
                            "name": "revision",
                            "description": "Product revision.",
                            "type": "string"
                        },
                        {
                            "name": "userAgent",
                            "description": "User-Agent.",
                            "type": "string"
                        },
                        {
                            "name": "jsVersion",
                            "description": "V8 version.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "getBrowserCommandLine",
                    "description": "Returns the command line switches for the browser process if, and only if\n--enable-automation is on the commandline.",
                    "experimental": true,
                    "returns": [
                        {
                            "name": "arguments",
                            "description": "Commandline parameters",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                },
                {
                    "name": "getHistograms",
                    "description": "Get Chrome histograms.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "query",
                            "description": "Requested substring in name. Only histograms which have query as a\nsubstring in their name are extracted. An empty or absent query returns\nall histograms.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "delta",
                            "description": "If true, retrieve delta since last call.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "histograms",
                            "description": "Histograms.",
                            "type": "array",
                            "items": {
                                "$ref": "Histogram"
                            }
                        }
                    ]
                },
                {
                    "name": "getHistogram",
                    "description": "Get a Chrome histogram by name.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Requested histogram name.",
                            "type": "string"
                        },
                        {
                            "name": "delta",
                            "description": "If true, retrieve delta since last call.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "histogram",
                            "description": "Histogram.",
                            "$ref": "Histogram"
                        }
                    ]
                },
                {
                    "name": "getWindowBounds",
                    "description": "Get position and size of the browser window.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "windowId",
                            "description": "Browser window id.",
                            "$ref": "WindowID"
                        }
                    ],
                    "returns": [
                        {
                            "name": "bounds",
                            "description": "Bounds information of the window. When window state is 'minimized', the restored window\nposition and size are returned.",
                            "$ref": "Bounds"
                        }
                    ]
                },
                {
                    "name": "getWindowForTarget",
                    "description": "Get the browser window that contains the devtools target.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "targetId",
                            "description": "Devtools agent host id. If called as a part of the session, associated targetId is used.",
                            "optional": true,
                            "$ref": "Target.TargetID"
                        }
                    ],
                    "returns": [
                        {
                            "name": "windowId",
                            "description": "Browser window id.",
                            "$ref": "WindowID"
                        },
                        {
                            "name": "bounds",
                            "description": "Bounds information of the window. When window state is 'minimized', the restored window\nposition and size are returned.",
                            "$ref": "Bounds"
                        }
                    ]
                },
                {
                    "name": "setWindowBounds",
                    "description": "Set position and/or size of the browser window.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "windowId",
                            "description": "Browser window id.",
                            "$ref": "WindowID"
                        },
                        {
                            "name": "bounds",
                            "description": "New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined\nwith 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.",
                            "$ref": "Bounds"
                        }
                    ]
                },
                {
                    "name": "setDockTile",
                    "description": "Set dock tile details, platform-specific.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "badgeLabel",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "image",
                            "description": "Png encoded image. (Encoded as a base64 string when passed over JSON)",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "executeBrowserCommand",
                    "description": "Invoke custom browser commands used by telemetry.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "commandId",
                            "$ref": "BrowserCommandId"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "CSS",
            "description": "This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles)\nhave an associated `id` used in subsequent operations on the related object. Each object type has\na specific `id` structure, and those are not interchangeable between objects of different kinds.\nCSS objects can be loaded using the `get*ForNode()` calls (which accept a DOM node id). A client\ncan also keep track of stylesheets via the `styleSheetAdded`/`styleSheetRemoved` events and\nsubsequently load the required stylesheet contents using the `getStyleSheet[Text]()` methods.",
            "experimental": true,
            "dependencies": [
                "DOM",
                "Page"
            ],
            "types": [
                {
                    "id": "StyleSheetId",
                    "type": "string"
                },
                {
                    "id": "StyleSheetOrigin",
                    "description": "Stylesheet type: \"injected\" for stylesheets injected via extension, \"user-agent\" for user-agent\nstylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via\ninspector\" rules), \"regular\" for regular stylesheets.",
                    "type": "string",
                    "enum": [
                        "injected",
                        "user-agent",
                        "inspector",
                        "regular"
                    ]
                },
                {
                    "id": "PseudoElementMatches",
                    "description": "CSS rule collection for a single pseudo style.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "pseudoType",
                            "description": "Pseudo element type.",
                            "$ref": "DOM.PseudoType"
                        },
                        {
                            "name": "matches",
                            "description": "Matches of CSS rules applicable to the pseudo style.",
                            "type": "array",
                            "items": {
                                "$ref": "RuleMatch"
                            }
                        }
                    ]
                },
                {
                    "id": "InheritedStyleEntry",
                    "description": "Inherited CSS rule collection from ancestor node.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "inlineStyle",
                            "description": "The ancestor node's inline style, if any, in the style inheritance chain.",
                            "optional": true,
                            "$ref": "CSSStyle"
                        },
                        {
                            "name": "matchedCSSRules",
                            "description": "Matches of CSS rules matching the ancestor node in the style inheritance chain.",
                            "type": "array",
                            "items": {
                                "$ref": "RuleMatch"
                            }
                        }
                    ]
                },
                {
                    "id": "RuleMatch",
                    "description": "Match data for a CSS rule.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "rule",
                            "description": "CSS rule in the match.",
                            "$ref": "CSSRule"
                        },
                        {
                            "name": "matchingSelectors",
                            "description": "Matching selector indices in the rule's selectorList selectors (0-based).",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    ]
                },
                {
                    "id": "Value",
                    "description": "Data for a simple selector (these are delimited by commas in a selector list).",
                    "type": "object",
                    "properties": [
                        {
                            "name": "text",
                            "description": "Value text.",
                            "type": "string"
                        },
                        {
                            "name": "range",
                            "description": "Value range in the underlying resource (if available).",
                            "optional": true,
                            "$ref": "SourceRange"
                        }
                    ]
                },
                {
                    "id": "SelectorList",
                    "description": "Selector list data.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "selectors",
                            "description": "Selectors in the list.",
                            "type": "array",
                            "items": {
                                "$ref": "Value"
                            }
                        },
                        {
                            "name": "text",
                            "description": "Rule selector text.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "CSSStyleSheetHeader",
                    "description": "CSS stylesheet metainformation.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "styleSheetId",
                            "description": "The stylesheet identifier.",
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "frameId",
                            "description": "Owner frame identifier.",
                            "$ref": "Page.FrameId"
                        },
                        {
                            "name": "sourceURL",
                            "description": "Stylesheet resource URL.",
                            "type": "string"
                        },
                        {
                            "name": "sourceMapURL",
                            "description": "URL of source map associated with the stylesheet (if any).",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "origin",
                            "description": "Stylesheet origin.",
                            "$ref": "StyleSheetOrigin"
                        },
                        {
                            "name": "title",
                            "description": "Stylesheet title.",
                            "type": "string"
                        },
                        {
                            "name": "ownerNode",
                            "description": "The backend id for the owner node of the stylesheet.",
                            "optional": true,
                            "$ref": "DOM.BackendNodeId"
                        },
                        {
                            "name": "disabled",
                            "description": "Denotes whether the stylesheet is disabled.",
                            "type": "boolean"
                        },
                        {
                            "name": "hasSourceURL",
                            "description": "Whether the sourceURL field value comes from the sourceURL comment.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "isInline",
                            "description": "Whether this stylesheet is created for STYLE tag by parser. This flag is not set for\ndocument.written STYLE tags.",
                            "type": "boolean"
                        },
                        {
                            "name": "isMutable",
                            "description": "Whether this stylesheet is mutable. Inline stylesheets become mutable\nafter they have been modified via CSSOM API.\n<link> element's stylesheets become mutable only if DevTools modifies them.\nConstructed stylesheets (new CSSStyleSheet()) are mutable immediately after creation.",
                            "type": "boolean"
                        },
                        {
                            "name": "isConstructed",
                            "description": "Whether this stylesheet is a constructed stylesheet (created using new CSSStyleSheet()).",
                            "type": "boolean"
                        },
                        {
                            "name": "startLine",
                            "description": "Line offset of the stylesheet within the resource (zero based).",
                            "type": "number"
                        },
                        {
                            "name": "startColumn",
                            "description": "Column offset of the stylesheet within the resource (zero based).",
                            "type": "number"
                        },
                        {
                            "name": "length",
                            "description": "Size of the content (in characters).",
                            "type": "number"
                        },
                        {
                            "name": "endLine",
                            "description": "Line offset of the end of the stylesheet within the resource (zero based).",
                            "type": "number"
                        },
                        {
                            "name": "endColumn",
                            "description": "Column offset of the end of the stylesheet within the resource (zero based).",
                            "type": "number"
                        }
                    ]
                },
                {
                    "id": "CSSRule",
                    "description": "CSS rule representation.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "styleSheetId",
                            "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
                            "optional": true,
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "selectorList",
                            "description": "Rule selector data.",
                            "$ref": "SelectorList"
                        },
                        {
                            "name": "origin",
                            "description": "Parent stylesheet's origin.",
                            "$ref": "StyleSheetOrigin"
                        },
                        {
                            "name": "style",
                            "description": "Associated style declaration.",
                            "$ref": "CSSStyle"
                        },
                        {
                            "name": "media",
                            "description": "Media list array (for rules involving media queries). The array enumerates media queries\nstarting with the innermost one, going outwards.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "CSSMedia"
                            }
                        }
                    ]
                },
                {
                    "id": "RuleUsage",
                    "description": "CSS coverage information.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "styleSheetId",
                            "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "startOffset",
                            "description": "Offset of the start of the rule (including selector) from the beginning of the stylesheet.",
                            "type": "number"
                        },
                        {
                            "name": "endOffset",
                            "description": "Offset of the end of the rule body from the beginning of the stylesheet.",
                            "type": "number"
                        },
                        {
                            "name": "used",
                            "description": "Indicates whether the rule was actually used by some element in the page.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "SourceRange",
                    "description": "Text range within a resource. All numbers are zero-based.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "startLine",
                            "description": "Start line of range.",
                            "type": "integer"
                        },
                        {
                            "name": "startColumn",
                            "description": "Start column of range (inclusive).",
                            "type": "integer"
                        },
                        {
                            "name": "endLine",
                            "description": "End line of range",
                            "type": "integer"
                        },
                        {
                            "name": "endColumn",
                            "description": "End column of range (exclusive).",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "ShorthandEntry",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "Shorthand name.",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "Shorthand value.",
                            "type": "string"
                        },
                        {
                            "name": "important",
                            "description": "Whether the property has \"!important\" annotation (implies `false` if absent).",
                            "optional": true,
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "CSSComputedStyleProperty",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "Computed style property name.",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "Computed style property value.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "CSSStyle",
                    "description": "CSS style representation.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "styleSheetId",
                            "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
                            "optional": true,
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "cssProperties",
                            "description": "CSS properties in the style.",
                            "type": "array",
                            "items": {
                                "$ref": "CSSProperty"
                            }
                        },
                        {
                            "name": "shorthandEntries",
                            "description": "Computed values for all shorthands found in the style.",
                            "type": "array",
                            "items": {
                                "$ref": "ShorthandEntry"
                            }
                        },
                        {
                            "name": "cssText",
                            "description": "Style declaration text (if available).",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "range",
                            "description": "Style declaration range in the enclosing stylesheet (if available).",
                            "optional": true,
                            "$ref": "SourceRange"
                        }
                    ]
                },
                {
                    "id": "CSSProperty",
                    "description": "CSS property declaration data.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "The property name.",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "The property value.",
                            "type": "string"
                        },
                        {
                            "name": "important",
                            "description": "Whether the property has \"!important\" annotation (implies `false` if absent).",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "implicit",
                            "description": "Whether the property is implicit (implies `false` if absent).",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "text",
                            "description": "The full property text as specified in the style.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "parsedOk",
                            "description": "Whether the property is understood by the browser (implies `true` if absent).",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "disabled",
                            "description": "Whether the property is disabled by the user (present for source-based properties only).",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "range",
                            "description": "The entire property range in the enclosing style declaration (if available).",
                            "optional": true,
                            "$ref": "SourceRange"
                        }
                    ]
                },
                {
                    "id": "CSSMedia",
                    "description": "CSS media rule descriptor.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "text",
                            "description": "Media query text.",
                            "type": "string"
                        },
                        {
                            "name": "source",
                            "description": "Source of the media query: \"mediaRule\" if specified by a @media rule, \"importRule\" if\nspecified by an @import rule, \"linkedSheet\" if specified by a \"media\" attribute in a linked\nstylesheet's LINK tag, \"inlineSheet\" if specified by a \"media\" attribute in an inline\nstylesheet's STYLE tag.",
                            "type": "string",
                            "enum": [
                                "mediaRule",
                                "importRule",
                                "linkedSheet",
                                "inlineSheet"
                            ]
                        },
                        {
                            "name": "sourceURL",
                            "description": "URL of the document containing the media query description.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "range",
                            "description": "The associated rule (@media or @import) header range in the enclosing stylesheet (if\navailable).",
                            "optional": true,
                            "$ref": "SourceRange"
                        },
                        {
                            "name": "styleSheetId",
                            "description": "Identifier of the stylesheet containing this object (if exists).",
                            "optional": true,
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "mediaList",
                            "description": "Array of media queries.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "MediaQuery"
                            }
                        }
                    ]
                },
                {
                    "id": "MediaQuery",
                    "description": "Media query descriptor.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "expressions",
                            "description": "Array of media query expressions.",
                            "type": "array",
                            "items": {
                                "$ref": "MediaQueryExpression"
                            }
                        },
                        {
                            "name": "active",
                            "description": "Whether the media query condition is satisfied.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "MediaQueryExpression",
                    "description": "Media query expression descriptor.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "value",
                            "description": "Media query expression value.",
                            "type": "number"
                        },
                        {
                            "name": "unit",
                            "description": "Media query expression units.",
                            "type": "string"
                        },
                        {
                            "name": "feature",
                            "description": "Media query expression feature.",
                            "type": "string"
                        },
                        {
                            "name": "valueRange",
                            "description": "The associated range of the value text in the enclosing stylesheet (if available).",
                            "optional": true,
                            "$ref": "SourceRange"
                        },
                        {
                            "name": "computedLength",
                            "description": "Computed length of media query expression (if applicable).",
                            "optional": true,
                            "type": "number"
                        }
                    ]
                },
                {
                    "id": "PlatformFontUsage",
                    "description": "Information about amount of glyphs that were rendered with given font.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "familyName",
                            "description": "Font's family name reported by platform.",
                            "type": "string"
                        },
                        {
                            "name": "isCustomFont",
                            "description": "Indicates if the font was downloaded or resolved locally.",
                            "type": "boolean"
                        },
                        {
                            "name": "glyphCount",
                            "description": "Amount of glyphs that were rendered with this font.",
                            "type": "number"
                        }
                    ]
                },
                {
                    "id": "FontVariationAxis",
                    "description": "Information about font variation axes for variable fonts",
                    "type": "object",
                    "properties": [
                        {
                            "name": "tag",
                            "description": "The font-variation-setting tag (a.k.a. \"axis tag\").",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "description": "Human-readable variation name in the default language (normally, \"en\").",
                            "type": "string"
                        },
                        {
                            "name": "minValue",
                            "description": "The minimum value (inclusive) the font supports for this tag.",
                            "type": "number"
                        },
                        {
                            "name": "maxValue",
                            "description": "The maximum value (inclusive) the font supports for this tag.",
                            "type": "number"
                        },
                        {
                            "name": "defaultValue",
                            "description": "The default value.",
                            "type": "number"
                        }
                    ]
                },
                {
                    "id": "FontFace",
                    "description": "Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions\nand additional information such as platformFontFamily and fontVariationAxes.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "fontFamily",
                            "description": "The font-family.",
                            "type": "string"
                        },
                        {
                            "name": "fontStyle",
                            "description": "The font-style.",
                            "type": "string"
                        },
                        {
                            "name": "fontVariant",
                            "description": "The font-variant.",
                            "type": "string"
                        },
                        {
                            "name": "fontWeight",
                            "description": "The font-weight.",
                            "type": "string"
                        },
                        {
                            "name": "fontStretch",
                            "description": "The font-stretch.",
                            "type": "string"
                        },
                        {
                            "name": "unicodeRange",
                            "description": "The unicode-range.",
                            "type": "string"
                        },
                        {
                            "name": "src",
                            "description": "The src.",
                            "type": "string"
                        },
                        {
                            "name": "platformFontFamily",
                            "description": "The resolved platform font family",
                            "type": "string"
                        },
                        {
                            "name": "fontVariationAxes",
                            "description": "Available variation settings (a.k.a. \"axes\").",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "FontVariationAxis"
                            }
                        }
                    ]
                },
                {
                    "id": "CSSKeyframesRule",
                    "description": "CSS keyframes rule representation.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "animationName",
                            "description": "Animation name.",
                            "$ref": "Value"
                        },
                        {
                            "name": "keyframes",
                            "description": "List of keyframes.",
                            "type": "array",
                            "items": {
                                "$ref": "CSSKeyframeRule"
                            }
                        }
                    ]
                },
                {
                    "id": "CSSKeyframeRule",
                    "description": "CSS keyframe rule representation.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "styleSheetId",
                            "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
                            "optional": true,
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "origin",
                            "description": "Parent stylesheet's origin.",
                            "$ref": "StyleSheetOrigin"
                        },
                        {
                            "name": "keyText",
                            "description": "Associated key text.",
                            "$ref": "Value"
                        },
                        {
                            "name": "style",
                            "description": "Associated style declaration.",
                            "$ref": "CSSStyle"
                        }
                    ]
                },
                {
                    "id": "StyleDeclarationEdit",
                    "description": "A descriptor of operation to mutate style declaration text.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "styleSheetId",
                            "description": "The css style sheet identifier.",
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "range",
                            "description": "The range of the style text in the enclosing stylesheet.",
                            "$ref": "SourceRange"
                        },
                        {
                            "name": "text",
                            "description": "New style text.",
                            "type": "string"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "addRule",
                    "description": "Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the\nposition specified by `location`.",
                    "parameters": [
                        {
                            "name": "styleSheetId",
                            "description": "The css style sheet identifier where a new rule should be inserted.",
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "ruleText",
                            "description": "The text of a new rule.",
                            "type": "string"
                        },
                        {
                            "name": "location",
                            "description": "Text position of a new rule in the target style sheet.",
                            "$ref": "SourceRange"
                        }
                    ],
                    "returns": [
                        {
                            "name": "rule",
                            "description": "The newly created rule.",
                            "$ref": "CSSRule"
                        }
                    ]
                },
                {
                    "name": "collectClassNames",
                    "description": "Returns all class names from specified stylesheet.",
                    "parameters": [
                        {
                            "name": "styleSheetId",
                            "$ref": "StyleSheetId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "classNames",
                            "description": "Class name list.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                },
                {
                    "name": "createStyleSheet",
                    "description": "Creates a new special \"via-inspector\" stylesheet in the frame with given `frameId`.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "description": "Identifier of the frame where \"via-inspector\" stylesheet should be created.",
                            "$ref": "Page.FrameId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "styleSheetId",
                            "description": "Identifier of the created \"via-inspector\" stylesheet.",
                            "$ref": "StyleSheetId"
                        }
                    ]
                },
                {
                    "name": "disable",
                    "description": "Disables the CSS agent for the given page."
                },
                {
                    "name": "enable",
                    "description": "Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been\nenabled until the result of this command is received."
                },
                {
                    "name": "forcePseudoState",
                    "description": "Ensures that the given node will have specified pseudo-classes whenever its style is computed by\nthe browser.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "The element id for which to force the pseudo state.",
                            "$ref": "DOM.NodeId"
                        },
                        {
                            "name": "forcedPseudoClasses",
                            "description": "Element pseudo classes to force when computing the element's style.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                },
                {
                    "name": "getBackgroundColors",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to get background colors for.",
                            "$ref": "DOM.NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "backgroundColors",
                            "description": "The range of background colors behind this element, if it contains any visible text. If no\nvisible text is present, this will be undefined. In the case of a flat background color,\nthis will consist of simply that color. In the case of a gradient, this will consist of each\nof the color stops. For anything more complicated, this will be an empty array. Images will\nbe ignored (as if the image had failed to load).",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "computedFontSize",
                            "description": "The computed font size for this node, as a CSS computed value string (e.g. '12px').",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "computedFontWeight",
                            "description": "The computed font weight for this node, as a CSS computed value string (e.g. 'normal' or\n'100').",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "getComputedStyleForNode",
                    "description": "Returns the computed style for a DOM node identified by `nodeId`.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "DOM.NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "computedStyle",
                            "description": "Computed style for the specified DOM node.",
                            "type": "array",
                            "items": {
                                "$ref": "CSSComputedStyleProperty"
                            }
                        }
                    ]
                },
                {
                    "name": "getInlineStylesForNode",
                    "description": "Returns the styles defined inline (explicitly in the \"style\" attribute and implicitly, using DOM\nattributes) for a DOM node identified by `nodeId`.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "DOM.NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "inlineStyle",
                            "description": "Inline style for the specified DOM node.",
                            "optional": true,
                            "$ref": "CSSStyle"
                        },
                        {
                            "name": "attributesStyle",
                            "description": "Attribute-defined element style (e.g. resulting from \"width=20 height=100%\").",
                            "optional": true,
                            "$ref": "CSSStyle"
                        }
                    ]
                },
                {
                    "name": "getMatchedStylesForNode",
                    "description": "Returns requested styles for a DOM node identified by `nodeId`.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "DOM.NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "inlineStyle",
                            "description": "Inline style for the specified DOM node.",
                            "optional": true,
                            "$ref": "CSSStyle"
                        },
                        {
                            "name": "attributesStyle",
                            "description": "Attribute-defined element style (e.g. resulting from \"width=20 height=100%\").",
                            "optional": true,
                            "$ref": "CSSStyle"
                        },
                        {
                            "name": "matchedCSSRules",
                            "description": "CSS rules matching this node, from all applicable stylesheets.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "RuleMatch"
                            }
                        },
                        {
                            "name": "pseudoElements",
                            "description": "Pseudo style matches for this node.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "PseudoElementMatches"
                            }
                        },
                        {
                            "name": "inherited",
                            "description": "A chain of inherited styles (from the immediate node parent up to the DOM tree root).",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "InheritedStyleEntry"
                            }
                        },
                        {
                            "name": "cssKeyframesRules",
                            "description": "A list of CSS keyframed animations matching this node.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "CSSKeyframesRule"
                            }
                        }
                    ]
                },
                {
                    "name": "getMediaQueries",
                    "description": "Returns all media queries parsed by the rendering engine.",
                    "returns": [
                        {
                            "name": "medias",
                            "type": "array",
                            "items": {
                                "$ref": "CSSMedia"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlatformFontsForNode",
                    "description": "Requests information about platform fonts which we used to render child TextNodes in the given\nnode.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "DOM.NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "fonts",
                            "description": "Usage statistics for every employed platform font.",
                            "type": "array",
                            "items": {
                                "$ref": "PlatformFontUsage"
                            }
                        }
                    ]
                },
                {
                    "name": "getStyleSheetText",
                    "description": "Returns the current textual content for a stylesheet.",
                    "parameters": [
                        {
                            "name": "styleSheetId",
                            "$ref": "StyleSheetId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "text",
                            "description": "The stylesheet text.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "trackComputedStyleUpdates",
                    "description": "Starts tracking the given computed styles for updates. The specified array of properties\nreplaces the one previously specified. Pass empty array to disable tracking.\nUse takeComputedStyleUpdates to retrieve the list of nodes that had properties modified.\nThe changes to computed style properties are only tracked for nodes pushed to the front-end\nby the DOM agent. If no changes to the tracked properties occur after the node has been pushed\nto the front-end, no updates will be issued for the node.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "propertiesToTrack",
                            "type": "array",
                            "items": {
                                "$ref": "CSSComputedStyleProperty"
                            }
                        }
                    ]
                },
                {
                    "name": "takeComputedStyleUpdates",
                    "description": "Polls the next batch of computed style updates.",
                    "experimental": true,
                    "returns": [
                        {
                            "name": "nodeIds",
                            "description": "The list of node Ids that have their tracked computed styles updated",
                            "type": "array",
                            "items": {
                                "$ref": "DOM.NodeId"
                            }
                        }
                    ]
                },
                {
                    "name": "setEffectivePropertyValueForNode",
                    "description": "Find a rule with the given active property for the given node and set the new value for this\nproperty",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "The element id for which to set property.",
                            "$ref": "DOM.NodeId"
                        },
                        {
                            "name": "propertyName",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setKeyframeKey",
                    "description": "Modifies the keyframe rule key text.",
                    "parameters": [
                        {
                            "name": "styleSheetId",
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "range",
                            "$ref": "SourceRange"
                        },
                        {
                            "name": "keyText",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "keyText",
                            "description": "The resulting key text after modification.",
                            "$ref": "Value"
                        }
                    ]
                },
                {
                    "name": "setMediaText",
                    "description": "Modifies the rule selector.",
                    "parameters": [
                        {
                            "name": "styleSheetId",
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "range",
                            "$ref": "SourceRange"
                        },
                        {
                            "name": "text",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "media",
                            "description": "The resulting CSS media rule after modification.",
                            "$ref": "CSSMedia"
                        }
                    ]
                },
                {
                    "name": "setRuleSelector",
                    "description": "Modifies the rule selector.",
                    "parameters": [
                        {
                            "name": "styleSheetId",
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "range",
                            "$ref": "SourceRange"
                        },
                        {
                            "name": "selector",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "selectorList",
                            "description": "The resulting selector list after modification.",
                            "$ref": "SelectorList"
                        }
                    ]
                },
                {
                    "name": "setStyleSheetText",
                    "description": "Sets the new stylesheet text.",
                    "parameters": [
                        {
                            "name": "styleSheetId",
                            "$ref": "StyleSheetId"
                        },
                        {
                            "name": "text",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "sourceMapURL",
                            "description": "URL of source map associated with script (if any).",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setStyleTexts",
                    "description": "Applies specified style edits one after another in the given order.",
                    "parameters": [
                        {
                            "name": "edits",
                            "type": "array",
                            "items": {
                                "$ref": "StyleDeclarationEdit"
                            }
                        }
                    ],
                    "returns": [
                        {
                            "name": "styles",
                            "description": "The resulting styles after modification.",
                            "type": "array",
                            "items": {
                                "$ref": "CSSStyle"
                            }
                        }
                    ]
                },
                {
                    "name": "startRuleUsageTracking",
                    "description": "Enables the selector recording."
                },
                {
                    "name": "stopRuleUsageTracking",
                    "description": "Stop tracking rule usage and return the list of rules that were used since last call to\n`takeCoverageDelta` (or since start of coverage instrumentation)",
                    "returns": [
                        {
                            "name": "ruleUsage",
                            "type": "array",
                            "items": {
                                "$ref": "RuleUsage"
                            }
                        }
                    ]
                },
                {
                    "name": "takeCoverageDelta",
                    "description": "Obtain list of rules that became used since last call to this method (or since start of coverage\ninstrumentation)",
                    "returns": [
                        {
                            "name": "coverage",
                            "type": "array",
                            "items": {
                                "$ref": "RuleUsage"
                            }
                        },
                        {
                            "name": "timestamp",
                            "description": "Monotonically increasing time, in seconds.",
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "setLocalFontsEnabled",
                    "description": "Enables/disables rendering of local CSS fonts (enabled by default).",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "enabled",
                            "description": "Whether rendering of local fonts is enabled.",
                            "type": "boolean"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "fontsUpdated",
                    "description": "Fires whenever a web font is updated.  A non-empty font parameter indicates a successfully loaded\nweb font",
                    "parameters": [
                        {
                            "name": "font",
                            "description": "The web font that has loaded.",
                            "optional": true,
                            "$ref": "FontFace"
                        }
                    ]
                },
                {
                    "name": "mediaQueryResultChanged",
                    "description": "Fires whenever a MediaQuery result changes (for example, after a browser window has been\nresized.) The current implementation considers only viewport-dependent media features."
                },
                {
                    "name": "styleSheetAdded",
                    "description": "Fired whenever an active document stylesheet is added.",
                    "parameters": [
                        {
                            "name": "header",
                            "description": "Added stylesheet metainfo.",
                            "$ref": "CSSStyleSheetHeader"
                        }
                    ]
                },
                {
                    "name": "styleSheetChanged",
                    "description": "Fired whenever a stylesheet is changed as a result of the client operation.",
                    "parameters": [
                        {
                            "name": "styleSheetId",
                            "$ref": "StyleSheetId"
                        }
                    ]
                },
                {
                    "name": "styleSheetRemoved",
                    "description": "Fired whenever an active document stylesheet is removed.",
                    "parameters": [
                        {
                            "name": "styleSheetId",
                            "description": "Identifier of the removed stylesheet.",
                            "$ref": "StyleSheetId"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "CacheStorage",
            "experimental": true,
            "types": [
                {
                    "id": "CacheId",
                    "description": "Unique identifier of the Cache object.",
                    "type": "string"
                },
                {
                    "id": "CachedResponseType",
                    "description": "type of HTTP response cached",
                    "type": "string",
                    "enum": [
                        "basic",
                        "cors",
                        "default",
                        "error",
                        "opaqueResponse",
                        "opaqueRedirect"
                    ]
                },
                {
                    "id": "DataEntry",
                    "description": "Data entry.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "requestURL",
                            "description": "Request URL.",
                            "type": "string"
                        },
                        {
                            "name": "requestMethod",
                            "description": "Request method.",
                            "type": "string"
                        },
                        {
                            "name": "requestHeaders",
                            "description": "Request headers",
                            "type": "array",
                            "items": {
                                "$ref": "Header"
                            }
                        },
                        {
                            "name": "responseTime",
                            "description": "Number of seconds since epoch.",
                            "type": "number"
                        },
                        {
                            "name": "responseStatus",
                            "description": "HTTP response status code.",
                            "type": "integer"
                        },
                        {
                            "name": "responseStatusText",
                            "description": "HTTP response status text.",
                            "type": "string"
                        },
                        {
                            "name": "responseType",
                            "description": "HTTP response type",
                            "$ref": "CachedResponseType"
                        },
                        {
                            "name": "responseHeaders",
                            "description": "Response headers",
                            "type": "array",
                            "items": {
                                "$ref": "Header"
                            }
                        }
                    ]
                },
                {
                    "id": "Cache",
                    "description": "Cache identifier.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "cacheId",
                            "description": "An opaque unique id of the cache.",
                            "$ref": "CacheId"
                        },
                        {
                            "name": "securityOrigin",
                            "description": "Security origin of the cache.",
                            "type": "string"
                        },
                        {
                            "name": "cacheName",
                            "description": "The name of the cache.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "Header",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "CachedResponse",
                    "description": "Cached response",
                    "type": "object",
                    "properties": [
                        {
                            "name": "body",
                            "description": "Entry content, base64-encoded. (Encoded as a base64 string when passed over JSON)",
                            "type": "string"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "deleteCache",
                    "description": "Deletes a cache.",
                    "parameters": [
                        {
                            "name": "cacheId",
                            "description": "Id of cache for deletion.",
                            "$ref": "CacheId"
                        }
                    ]
                },
                {
                    "name": "deleteEntry",
                    "description": "Deletes a cache entry.",
                    "parameters": [
                        {
                            "name": "cacheId",
                            "description": "Id of cache where the entry will be deleted.",
                            "$ref": "CacheId"
                        },
                        {
                            "name": "request",
                            "description": "URL spec of the request.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "requestCacheNames",
                    "description": "Requests cache names.",
                    "parameters": [
                        {
                            "name": "securityOrigin",
                            "description": "Security origin.",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "caches",
                            "description": "Caches for the security origin.",
                            "type": "array",
                            "items": {
                                "$ref": "Cache"
                            }
                        }
                    ]
                },
                {
                    "name": "requestCachedResponse",
                    "description": "Fetches cache entry.",
                    "parameters": [
                        {
                            "name": "cacheId",
                            "description": "Id of cache that contains the entry.",
                            "$ref": "CacheId"
                        },
                        {
                            "name": "requestURL",
                            "description": "URL spec of the request.",
                            "type": "string"
                        },
                        {
                            "name": "requestHeaders",
                            "description": "headers of the request.",
                            "type": "array",
                            "items": {
                                "$ref": "Header"
                            }
                        }
                    ],
                    "returns": [
                        {
                            "name": "response",
                            "description": "Response read from the cache.",
                            "$ref": "CachedResponse"
                        }
                    ]
                },
                {
                    "name": "requestEntries",
                    "description": "Requests data from cache.",
                    "parameters": [
                        {
                            "name": "cacheId",
                            "description": "ID of cache to get entries from.",
                            "$ref": "CacheId"
                        },
                        {
                            "name": "skipCount",
                            "description": "Number of records to skip.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "pageSize",
                            "description": "Number of records to fetch.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "pathFilter",
                            "description": "If present, only return the entries containing this substring in the path",
                            "optional": true,
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "cacheDataEntries",
                            "description": "Array of object store data entries.",
                            "type": "array",
                            "items": {
                                "$ref": "DataEntry"
                            }
                        },
                        {
                            "name": "returnCount",
                            "description": "Count of returned entries from this storage. If pathFilter is empty, it\nis the count of all entries from this storage.",
                            "type": "number"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Cast",
            "description": "A domain for interacting with Cast, Presentation API, and Remote Playback API\nfunctionalities.",
            "experimental": true,
            "types": [
                {
                    "id": "Sink",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "session",
                            "description": "Text describing the current session. Present only if there is an active\nsession on the sink.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "enable",
                    "description": "Starts observing for sinks that can be used for tab mirroring, and if set,\nsinks compatible with |presentationUrl| as well. When sinks are found, a\n|sinksUpdated| event is fired.\nAlso starts observing for issue messages. When an issue is added or removed,\nan |issueUpdated| event is fired.",
                    "parameters": [
                        {
                            "name": "presentationUrl",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "disable",
                    "description": "Stops observing for sinks and issues."
                },
                {
                    "name": "setSinkToUse",
                    "description": "Sets a sink to be used when the web page requests the browser to choose a\nsink via Presentation API, Remote Playback API, or Cast SDK.",
                    "parameters": [
                        {
                            "name": "sinkName",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "startTabMirroring",
                    "description": "Starts mirroring the tab to the sink.",
                    "parameters": [
                        {
                            "name": "sinkName",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "stopCasting",
                    "description": "Stops the active Cast session on the sink.",
                    "parameters": [
                        {
                            "name": "sinkName",
                            "type": "string"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "sinksUpdated",
                    "description": "This is fired whenever the list of available sinks changes. A sink is a\ndevice or a software surface that you can cast to.",
                    "parameters": [
                        {
                            "name": "sinks",
                            "type": "array",
                            "items": {
                                "$ref": "Sink"
                            }
                        }
                    ]
                },
                {
                    "name": "issueUpdated",
                    "description": "This is fired whenever the outstanding issue/error message changes.\n|issueMessage| is empty if there is no issue.",
                    "parameters": [
                        {
                            "name": "issueMessage",
                            "type": "string"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "DOM",
            "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object\nthat has an `id`. This `id` can be used to get additional information on the Node, resolve it into\nthe JavaScript object wrapper, etc. It is important that client receives DOM events only for the\nnodes that are known to the client. Backend keeps track of the nodes that were sent to the client\nand never sends the same node twice. It is client's responsibility to collect information about\nthe nodes that were sent to the client.<p>Note that `iframe` owner elements will return\ncorresponding document elements as their child nodes.</p>",
            "dependencies": [
                "Runtime"
            ],
            "types": [
                {
                    "id": "NodeId",
                    "description": "Unique DOM node identifier.",
                    "type": "integer"
                },
                {
                    "id": "BackendNodeId",
                    "description": "Unique DOM node identifier used to reference a node that may not have been pushed to the\nfront-end.",
                    "type": "integer"
                },
                {
                    "id": "BackendNode",
                    "description": "Backend node with a friendly name.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "nodeType",
                            "description": "`Node`'s nodeType.",
                            "type": "integer"
                        },
                        {
                            "name": "nodeName",
                            "description": "`Node`'s nodeName.",
                            "type": "string"
                        },
                        {
                            "name": "backendNodeId",
                            "$ref": "BackendNodeId"
                        }
                    ]
                },
                {
                    "id": "PseudoType",
                    "description": "Pseudo element type.",
                    "type": "string",
                    "enum": [
                        "first-line",
                        "first-letter",
                        "before",
                        "after",
                        "marker",
                        "backdrop",
                        "selection",
                        "target-text",
                        "spelling-error",
                        "grammar-error",
                        "first-line-inherited",
                        "scrollbar",
                        "scrollbar-thumb",
                        "scrollbar-button",
                        "scrollbar-track",
                        "scrollbar-track-piece",
                        "scrollbar-corner",
                        "resizer",
                        "input-list-button"
                    ]
                },
                {
                    "id": "ShadowRootType",
                    "description": "Shadow root type.",
                    "type": "string",
                    "enum": [
                        "user-agent",
                        "open",
                        "closed"
                    ]
                },
                {
                    "id": "Node",
                    "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.\nDOMNode is a base node mirror type.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "nodeId",
                            "description": "Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend\nwill only push node with given `id` once. It is aware of all requested nodes and will only\nfire DOM events for nodes known to the client.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "parentId",
                            "description": "The id of the parent node if any.",
                            "optional": true,
                            "$ref": "NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "The BackendNodeId for this node.",
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "nodeType",
                            "description": "`Node`'s nodeType.",
                            "type": "integer"
                        },
                        {
                            "name": "nodeName",
                            "description": "`Node`'s nodeName.",
                            "type": "string"
                        },
                        {
                            "name": "localName",
                            "description": "`Node`'s localName.",
                            "type": "string"
                        },
                        {
                            "name": "nodeValue",
                            "description": "`Node`'s nodeValue.",
                            "type": "string"
                        },
                        {
                            "name": "childNodeCount",
                            "description": "Child count for `Container` nodes.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "children",
                            "description": "Child nodes of this node when requested with children.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Node"
                            }
                        },
                        {
                            "name": "attributes",
                            "description": "Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "documentURL",
                            "description": "Document URL that `Document` or `FrameOwner` node points to.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "baseURL",
                            "description": "Base URL that `Document` or `FrameOwner` node uses for URL completion.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "publicId",
                            "description": "`DocumentType`'s publicId.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "systemId",
                            "description": "`DocumentType`'s systemId.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "internalSubset",
                            "description": "`DocumentType`'s internalSubset.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "xmlVersion",
                            "description": "`Document`'s XML version in case of XML documents.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "description": "`Attr`'s name.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "`Attr`'s value.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "pseudoType",
                            "description": "Pseudo element type for this node.",
                            "optional": true,
                            "$ref": "PseudoType"
                        },
                        {
                            "name": "shadowRootType",
                            "description": "Shadow root type.",
                            "optional": true,
                            "$ref": "ShadowRootType"
                        },
                        {
                            "name": "frameId",
                            "description": "Frame ID for frame owner elements.",
                            "optional": true,
                            "$ref": "Page.FrameId"
                        },
                        {
                            "name": "contentDocument",
                            "description": "Content document for frame owner elements.",
                            "optional": true,
                            "$ref": "Node"
                        },
                        {
                            "name": "shadowRoots",
                            "description": "Shadow root list for given element host.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Node"
                            }
                        },
                        {
                            "name": "templateContent",
                            "description": "Content document fragment for template elements.",
                            "optional": true,
                            "$ref": "Node"
                        },
                        {
                            "name": "pseudoElements",
                            "description": "Pseudo elements associated with this node.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Node"
                            }
                        },
                        {
                            "name": "importedDocument",
                            "description": "Import document for the HTMLImport links.",
                            "optional": true,
                            "$ref": "Node"
                        },
                        {
                            "name": "distributedNodes",
                            "description": "Distributed nodes for given insertion point.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "BackendNode"
                            }
                        },
                        {
                            "name": "isSVG",
                            "description": "Whether the node is SVG.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "RGBA",
                    "description": "A structure holding an RGBA color.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "r",
                            "description": "The red component, in the [0-255] range.",
                            "type": "integer"
                        },
                        {
                            "name": "g",
                            "description": "The green component, in the [0-255] range.",
                            "type": "integer"
                        },
                        {
                            "name": "b",
                            "description": "The blue component, in the [0-255] range.",
                            "type": "integer"
                        },
                        {
                            "name": "a",
                            "description": "The alpha component, in the [0-1] range (default: 1).",
                            "optional": true,
                            "type": "number"
                        }
                    ]
                },
                {
                    "id": "Quad",
                    "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                {
                    "id": "BoxModel",
                    "description": "Box model.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "content",
                            "description": "Content box",
                            "$ref": "Quad"
                        },
                        {
                            "name": "padding",
                            "description": "Padding box",
                            "$ref": "Quad"
                        },
                        {
                            "name": "border",
                            "description": "Border box",
                            "$ref": "Quad"
                        },
                        {
                            "name": "margin",
                            "description": "Margin box",
                            "$ref": "Quad"
                        },
                        {
                            "name": "width",
                            "description": "Node width",
                            "type": "integer"
                        },
                        {
                            "name": "height",
                            "description": "Node height",
                            "type": "integer"
                        },
                        {
                            "name": "shapeOutside",
                            "description": "Shape outside coordinates",
                            "optional": true,
                            "$ref": "ShapeOutsideInfo"
                        }
                    ]
                },
                {
                    "id": "ShapeOutsideInfo",
                    "description": "CSS Shape Outside details.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "bounds",
                            "description": "Shape bounds",
                            "$ref": "Quad"
                        },
                        {
                            "name": "shape",
                            "description": "Shape coordinate details",
                            "type": "array",
                            "items": {
                                "type": "any"
                            }
                        },
                        {
                            "name": "marginShape",
                            "description": "Margin shape bounds",
                            "type": "array",
                            "items": {
                                "type": "any"
                            }
                        }
                    ]
                },
                {
                    "id": "Rect",
                    "description": "Rectangle.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "x",
                            "description": "X coordinate",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate",
                            "type": "number"
                        },
                        {
                            "name": "width",
                            "description": "Rectangle width",
                            "type": "number"
                        },
                        {
                            "name": "height",
                            "description": "Rectangle height",
                            "type": "number"
                        }
                    ]
                },
                {
                    "id": "CSSComputedStyleProperty",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "Computed style property name.",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "Computed style property value.",
                            "type": "string"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "collectClassNamesFromSubtree",
                    "description": "Collects class names for the node with given id and all of it's child nodes.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to collect class names.",
                            "$ref": "NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "classNames",
                            "description": "Class name list.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                },
                {
                    "name": "copyTo",
                    "description": "Creates a deep copy of the specified node and places it into the target container before the\ngiven anchor.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to copy.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "targetNodeId",
                            "description": "Id of the element to drop the copy into.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "insertBeforeNodeId",
                            "description": "Drop the copy before this node (if absent, the copy becomes the last child of\n`targetNodeId`).",
                            "optional": true,
                            "$ref": "NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node clone.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "describeNode",
                    "description": "Describes node given its id, does not require domain to be enabled. Does not start tracking any\nobjects, can be used for automation.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node.",
                            "optional": true,
                            "$ref": "NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Identifier of the backend node.",
                            "optional": true,
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObjectId"
                        },
                        {
                            "name": "depth",
                            "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "pierce",
                            "description": "Whether or not iframes and shadow roots should be traversed when returning the subtree\n(default is false).",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "node",
                            "description": "Node description.",
                            "$ref": "Node"
                        }
                    ]
                },
                {
                    "name": "scrollIntoViewIfNeeded",
                    "description": "Scrolls the specified rect of the given node into view if not already visible.\nNote: exactly one between nodeId, backendNodeId and objectId should be passed\nto identify the node.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node.",
                            "optional": true,
                            "$ref": "NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Identifier of the backend node.",
                            "optional": true,
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObjectId"
                        },
                        {
                            "name": "rect",
                            "description": "The rect to be scrolled into view, relative to the node's border box, in CSS pixels.\nWhen omitted, center of the node will be used, similar to Element.scrollIntoView.",
                            "optional": true,
                            "$ref": "Rect"
                        }
                    ]
                },
                {
                    "name": "disable",
                    "description": "Disables DOM agent for the given page."
                },
                {
                    "name": "discardSearchResults",
                    "description": "Discards search results from the session with the given id. `getSearchResults` should no longer\nbe called for that search.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "searchId",
                            "description": "Unique search session identifier.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "enable",
                    "description": "Enables DOM agent for the given page."
                },
                {
                    "name": "focus",
                    "description": "Focuses the given element.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node.",
                            "optional": true,
                            "$ref": "NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Identifier of the backend node.",
                            "optional": true,
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObjectId"
                        }
                    ]
                },
                {
                    "name": "getAttributes",
                    "description": "Returns attributes for the specified node.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to retrieve attibutes for.",
                            "$ref": "NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "attributes",
                            "description": "An interleaved array of node attribute names and values.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoxModel",
                    "description": "Returns boxes for the given node.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node.",
                            "optional": true,
                            "$ref": "NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Identifier of the backend node.",
                            "optional": true,
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "model",
                            "description": "Box model for the node.",
                            "$ref": "BoxModel"
                        }
                    ]
                },
                {
                    "name": "getContentQuads",
                    "description": "Returns quads that describe node position on the page. This method\nmight return multiple quads for inline nodes.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node.",
                            "optional": true,
                            "$ref": "NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Identifier of the backend node.",
                            "optional": true,
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "quads",
                            "description": "Quads that describe node layout relative to viewport.",
                            "type": "array",
                            "items": {
                                "$ref": "Quad"
                            }
                        }
                    ]
                },
                {
                    "name": "getDocument",
                    "description": "Returns the root DOM node (and optionally the subtree) to the caller.",
                    "parameters": [
                        {
                            "name": "depth",
                            "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "pierce",
                            "description": "Whether or not iframes and shadow roots should be traversed when returning the subtree\n(default is false).",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "root",
                            "description": "Resulting node.",
                            "$ref": "Node"
                        }
                    ]
                },
                {
                    "name": "getFlattenedDocument",
                    "description": "Returns the root DOM node (and optionally the subtree) to the caller.\nDeprecated, as it is not designed to work well with the rest of the DOM agent.\nUse DOMSnapshot.captureSnapshot instead.",
                    "deprecated": true,
                    "parameters": [
                        {
                            "name": "depth",
                            "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "pierce",
                            "description": "Whether or not iframes and shadow roots should be traversed when returning the subtree\n(default is false).",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodes",
                            "description": "Resulting node.",
                            "type": "array",
                            "items": {
                                "$ref": "Node"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodesForSubtreeByStyle",
                    "description": "Finds nodes with a given computed style in a subtree.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Node ID pointing to the root of a subtree.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "computedStyles",
                            "description": "The style to filter nodes by (includes nodes if any of properties matches).",
                            "type": "array",
                            "items": {
                                "$ref": "CSSComputedStyleProperty"
                            }
                        },
                        {
                            "name": "pierce",
                            "description": "Whether or not iframes and shadow roots in the same target should be traversed when returning the\nresults (default is false).",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeIds",
                            "description": "Resulting nodes.",
                            "type": "array",
                            "items": {
                                "$ref": "NodeId"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodeForLocation",
                    "description": "Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is\neither returned or not.",
                    "parameters": [
                        {
                            "name": "x",
                            "description": "X coordinate.",
                            "type": "integer"
                        },
                        {
                            "name": "y",
                            "description": "Y coordinate.",
                            "type": "integer"
                        },
                        {
                            "name": "includeUserAgentShadowDOM",
                            "description": "False to skip to the nearest non-UA shadow root ancestor (default: false).",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "ignorePointerEventsNone",
                            "description": "Whether to ignore pointer-events: none on elements and hit test them.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "backendNodeId",
                            "description": "Resulting node.",
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "frameId",
                            "description": "Frame this node belongs to.",
                            "$ref": "Page.FrameId"
                        },
                        {
                            "name": "nodeId",
                            "description": "Id of the node at given coordinates, only when enabled and requested document.",
                            "optional": true,
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "getOuterHTML",
                    "description": "Returns node's HTML markup.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node.",
                            "optional": true,
                            "$ref": "NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Identifier of the backend node.",
                            "optional": true,
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "outerHTML",
                            "description": "Outer HTML markup.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "getRelayoutBoundary",
                    "description": "Returns the id of the nearest ancestor that is a relayout boundary.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node.",
                            "$ref": "NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeId",
                            "description": "Relayout boundary node id for the given node.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "getSearchResults",
                    "description": "Returns search results from given `fromIndex` to given `toIndex` from the search with the given\nidentifier.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "searchId",
                            "description": "Unique search session identifier.",
                            "type": "string"
                        },
                        {
                            "name": "fromIndex",
                            "description": "Start index of the search result to be returned.",
                            "type": "integer"
                        },
                        {
                            "name": "toIndex",
                            "description": "End index of the search result to be returned.",
                            "type": "integer"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeIds",
                            "description": "Ids of the search result nodes.",
                            "type": "array",
                            "items": {
                                "$ref": "NodeId"
                            }
                        }
                    ]
                },
                {
                    "name": "hideHighlight",
                    "description": "Hides any highlight.",
                    "redirect": "Overlay"
                },
                {
                    "name": "highlightNode",
                    "description": "Highlights DOM node.",
                    "redirect": "Overlay"
                },
                {
                    "name": "highlightRect",
                    "description": "Highlights given rectangle.",
                    "redirect": "Overlay"
                },
                {
                    "name": "markUndoableState",
                    "description": "Marks last undoable state.",
                    "experimental": true
                },
                {
                    "name": "moveTo",
                    "description": "Moves node into the new container, places it before the given anchor.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to move.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "targetNodeId",
                            "description": "Id of the element to drop the moved node into.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "insertBeforeNodeId",
                            "description": "Drop node before this one (if absent, the moved node becomes the last child of\n`targetNodeId`).",
                            "optional": true,
                            "$ref": "NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeId",
                            "description": "New id of the moved node.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "performSearch",
                    "description": "Searches for a given string in the DOM tree. Use `getSearchResults` to access search results or\n`cancelSearch` to end this search session.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "query",
                            "description": "Plain text or query selector or XPath search query.",
                            "type": "string"
                        },
                        {
                            "name": "includeUserAgentShadowDOM",
                            "description": "True to search in user agent shadow DOM.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "searchId",
                            "description": "Unique search session identifier.",
                            "type": "string"
                        },
                        {
                            "name": "resultCount",
                            "description": "Number of search results.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "name": "pushNodeByPathToFrontend",
                    "description": "Requests that the node is sent to the caller given its path. // FIXME, use XPath",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "path",
                            "description": "Path to node in the proprietary format.",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node for given path.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "pushNodesByBackendIdsToFrontend",
                    "description": "Requests that a batch of nodes is sent to the caller given their backend node ids.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "backendNodeIds",
                            "description": "The array of backend node ids.",
                            "type": "array",
                            "items": {
                                "$ref": "BackendNodeId"
                            }
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeIds",
                            "description": "The array of ids of pushed nodes that correspond to the backend ids specified in\nbackendNodeIds.",
                            "type": "array",
                            "items": {
                                "$ref": "NodeId"
                            }
                        }
                    ]
                },
                {
                    "name": "querySelector",
                    "description": "Executes `querySelector` on a given node.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to query upon.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "selector",
                            "description": "Selector string.",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeId",
                            "description": "Query selector result.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "querySelectorAll",
                    "description": "Executes `querySelectorAll` on a given node.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to query upon.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "selector",
                            "description": "Selector string.",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeIds",
                            "description": "Query selector result.",
                            "type": "array",
                            "items": {
                                "$ref": "NodeId"
                            }
                        }
                    ]
                },
                {
                    "name": "redo",
                    "description": "Re-does the last undone action.",
                    "experimental": true
                },
                {
                    "name": "removeAttribute",
                    "description": "Removes attribute with given name from an element with given id.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the element to remove attribute from.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "name",
                            "description": "Name of the attribute to remove.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "removeNode",
                    "description": "Removes node with given id.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to remove.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "requestChildNodes",
                    "description": "Requests that children of the node with given id are returned to the caller in form of\n`setChildNodes` events where not only immediate children are retrieved, but all children down to\nthe specified depth.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to get children for.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "depth",
                            "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "pierce",
                            "description": "Whether or not iframes and shadow roots should be traversed when returning the sub-tree\n(default is false).",
                            "optional": true,
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "requestNode",
                    "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All\nnodes that form the path from the node to the root are also sent to the client as a series of\n`setChildNodes` notifications.",
                    "parameters": [
                        {
                            "name": "objectId",
                            "description": "JavaScript object id to convert into node.",
                            "$ref": "Runtime.RemoteObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeId",
                            "description": "Node id for given object.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "resolveNode",
                    "description": "Resolves the JavaScript node object for a given NodeId or BackendNodeId.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to resolve.",
                            "optional": true,
                            "$ref": "NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Backend identifier of the node to resolve.",
                            "optional": true,
                            "$ref": "DOM.BackendNodeId"
                        },
                        {
                            "name": "objectGroup",
                            "description": "Symbolic group name that can be used to release multiple objects.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "executionContextId",
                            "description": "Execution context in which to resolve the node.",
                            "optional": true,
                            "$ref": "Runtime.ExecutionContextId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "object",
                            "description": "JavaScript object wrapper for given node.",
                            "$ref": "Runtime.RemoteObject"
                        }
                    ]
                },
                {
                    "name": "setAttributeValue",
                    "description": "Sets attribute for an element with given id.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the element to set attribute for.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "name",
                            "description": "Attribute name.",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "Attribute value.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setAttributesAsText",
                    "description": "Sets attributes on element with given id. This method is useful when user edits some existing\nattribute value and types in several attribute name/value pairs.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the element to set attributes for.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "text",
                            "description": "Text with a number of attributes. Will parse this text using HTML parser.",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "description": "Attribute name to replace with new attributes derived from text in case text parsed\nsuccessfully.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setFileInputFiles",
                    "description": "Sets files for the given file input element.",
                    "parameters": [
                        {
                            "name": "files",
                            "description": "Array of file paths to set.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node.",
                            "optional": true,
                            "$ref": "NodeId"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Identifier of the backend node.",
                            "optional": true,
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObjectId"
                        }
                    ]
                },
                {
                    "name": "setNodeStackTracesEnabled",
                    "description": "Sets if stack traces should be captured for Nodes. See `Node.getNodeStackTraces`. Default is disabled.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "enable",
                            "description": "Enable or disable.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "getNodeStackTraces",
                    "description": "Gets stack traces associated with a Node. As of now, only provides stack trace for Node creation.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to get stack traces for.",
                            "$ref": "NodeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "creation",
                            "description": "Creation stack trace, if available.",
                            "optional": true,
                            "$ref": "Runtime.StackTrace"
                        }
                    ]
                },
                {
                    "name": "getFileInfo",
                    "description": "Returns file information for the given\nFile wrapper.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "objectId",
                            "description": "JavaScript object id of the node wrapper.",
                            "$ref": "Runtime.RemoteObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "path",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setInspectedNode",
                    "description": "Enables console to refer to the node with given id via $x (see Command Line API for more details\n$x functions).",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "DOM node id to be accessible by means of $x command line API.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "setNodeName",
                    "description": "Sets node name for a node with given id.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to set name for.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "name",
                            "description": "New node's name.",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeId",
                            "description": "New node's id.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "setNodeValue",
                    "description": "Sets node value for a node with given id.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to set value for.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "value",
                            "description": "New node's value.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setOuterHTML",
                    "description": "Sets node HTML markup, returns new node id.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node to set markup for.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "outerHTML",
                            "description": "Outer HTML markup to set.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "undo",
                    "description": "Undoes the last performed action.",
                    "experimental": true
                },
                {
                    "name": "getFrameOwner",
                    "description": "Returns iframe node that owns iframe with the given domain.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "frameId",
                            "$ref": "Page.FrameId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "backendNodeId",
                            "description": "Resulting node.",
                            "$ref": "BackendNodeId"
                        },
                        {
                            "name": "nodeId",
                            "description": "Id of the node at given coordinates, only when enabled and requested document.",
                            "optional": true,
                            "$ref": "NodeId"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "attributeModified",
                    "description": "Fired when `Element`'s attribute is modified.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node that has changed.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "name",
                            "description": "Attribute name.",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "Attribute value.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "attributeRemoved",
                    "description": "Fired when `Element`'s attribute is removed.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node that has changed.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "name",
                            "description": "A ttribute name.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "characterDataModified",
                    "description": "Mirrors `DOMCharacterDataModified` event.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node that has changed.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "characterData",
                            "description": "New text value.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "childNodeCountUpdated",
                    "description": "Fired when `Container`'s child node count has changed.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Id of the node that has changed.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "childNodeCount",
                            "description": "New node count.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "name": "childNodeInserted",
                    "description": "Mirrors `DOMNodeInserted` event.",
                    "parameters": [
                        {
                            "name": "parentNodeId",
                            "description": "Id of the node that has changed.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "previousNodeId",
                            "description": "If of the previous siblint.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "node",
                            "description": "Inserted node data.",
                            "$ref": "Node"
                        }
                    ]
                },
                {
                    "name": "childNodeRemoved",
                    "description": "Mirrors `DOMNodeRemoved` event.",
                    "parameters": [
                        {
                            "name": "parentNodeId",
                            "description": "Parent id.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "nodeId",
                            "description": "Id of the node that has been removed.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "distributedNodesUpdated",
                    "description": "Called when distrubution is changed.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "insertionPointId",
                            "description": "Insertion point where distrubuted nodes were updated.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "distributedNodes",
                            "description": "Distributed nodes for given insertion point.",
                            "type": "array",
                            "items": {
                                "$ref": "BackendNode"
                            }
                        }
                    ]
                },
                {
                    "name": "documentUpdated",
                    "description": "Fired when `Document` has been totally updated. Node ids are no longer valid."
                },
                {
                    "name": "inlineStyleInvalidated",
                    "description": "Fired when `Element`'s inline style is modified via a CSS property modification.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "nodeIds",
                            "description": "Ids of the nodes for which the inline styles have been invalidated.",
                            "type": "array",
                            "items": {
                                "$ref": "NodeId"
                            }
                        }
                    ]
                },
                {
                    "name": "pseudoElementAdded",
                    "description": "Called when a pseudo element is added to an element.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "parentId",
                            "description": "Pseudo element's parent element id.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "pseudoElement",
                            "description": "The added pseudo element.",
                            "$ref": "Node"
                        }
                    ]
                },
                {
                    "name": "pseudoElementRemoved",
                    "description": "Called when a pseudo element is removed from an element.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "parentId",
                            "description": "Pseudo element's parent element id.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "pseudoElementId",
                            "description": "The removed pseudo element id.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "setChildNodes",
                    "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon\nmost of the calls requesting node ids.",
                    "parameters": [
                        {
                            "name": "parentId",
                            "description": "Parent node id to populate with children.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "nodes",
                            "description": "Child nodes array.",
                            "type": "array",
                            "items": {
                                "$ref": "Node"
                            }
                        }
                    ]
                },
                {
                    "name": "shadowRootPopped",
                    "description": "Called when shadow root is popped from the element.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "hostId",
                            "description": "Host element id.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "rootId",
                            "description": "Shadow root id.",
                            "$ref": "NodeId"
                        }
                    ]
                },
                {
                    "name": "shadowRootPushed",
                    "description": "Called when shadow root is pushed into the element.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "hostId",
                            "description": "Host element id.",
                            "$ref": "NodeId"
                        },
                        {
                            "name": "root",
                            "description": "Shadow root.",
                            "$ref": "Node"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "DOMDebugger",
            "description": "DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript\nexecution will stop on these operations as if there was a regular breakpoint set.",
            "dependencies": [
                "DOM",
                "Debugger",
                "Runtime"
            ],
            "types": [
                {
                    "id": "DOMBreakpointType",
                    "description": "DOM breakpoint type.",
                    "type": "string",
                    "enum": [
                        "subtree-modified",
                        "attribute-modified",
                        "node-removed"
                    ]
                },
                {
                    "id": "CSPViolationType",
                    "description": "CSP Violation type.",
                    "experimental": true,
                    "type": "string",
                    "enum": [
                        "trustedtype-sink-violation",
                        "trustedtype-policy-violation"
                    ]
                },
                {
                    "id": "EventListener",
                    "description": "Object event listener.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "type",
                            "description": "`EventListener`'s type.",
                            "type": "string"
                        },
                        {
                            "name": "useCapture",
                            "description": "`EventListener`'s useCapture.",
                            "type": "boolean"
                        },
                        {
                            "name": "passive",
                            "description": "`EventListener`'s passive flag.",
                            "type": "boolean"
                        },
                        {
                            "name": "once",
                            "description": "`EventListener`'s once flag.",
                            "type": "boolean"
                        },
                        {
                            "name": "scriptId",
                            "description": "Script id of the handler code.",
                            "$ref": "Runtime.ScriptId"
                        },
                        {
                            "name": "lineNumber",
                            "description": "Line number in the script (0-based).",
                            "type": "integer"
                        },
                        {
                            "name": "columnNumber",
                            "description": "Column number in the script (0-based).",
                            "type": "integer"
                        },
                        {
                            "name": "handler",
                            "description": "Event handler function value.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObject"
                        },
                        {
                            "name": "originalHandler",
                            "description": "Event original handler function value.",
                            "optional": true,
                            "$ref": "Runtime.RemoteObject"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "Node the listener is added to (if any).",
                            "optional": true,
                            "$ref": "DOM.BackendNodeId"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "getEventListeners",
                    "description": "Returns event listeners of the given object.",
                    "parameters": [
                        {
                            "name": "objectId",
                            "description": "Identifier of the object to return listeners for.",
                            "$ref": "Runtime.RemoteObjectId"
                        },
                        {
                            "name": "depth",
                            "description": "The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "pierce",
                            "description": "Whether or not iframes and shadow roots should be traversed when returning the subtree\n(default is false). Reports listeners for all contexts if pierce is enabled.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "listeners",
                            "description": "Array of relevant listeners.",
                            "type": "array",
                            "items": {
                                "$ref": "EventListener"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDOMBreakpoint",
                    "description": "Removes DOM breakpoint that was set using `setDOMBreakpoint`.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node to remove breakpoint from.",
                            "$ref": "DOM.NodeId"
                        },
                        {
                            "name": "type",
                            "description": "Type of the breakpoint to remove.",
                            "$ref": "DOMBreakpointType"
                        }
                    ]
                },
                {
                    "name": "removeEventListenerBreakpoint",
                    "description": "Removes breakpoint on particular DOM event.",
                    "parameters": [
                        {
                            "name": "eventName",
                            "description": "Event name.",
                            "type": "string"
                        },
                        {
                            "name": "targetName",
                            "description": "EventTarget interface name.",
                            "experimental": true,
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "removeInstrumentationBreakpoint",
                    "description": "Removes breakpoint on particular native event.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "eventName",
                            "description": "Instrumentation name to stop on.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "removeXHRBreakpoint",
                    "description": "Removes breakpoint from XMLHttpRequest.",
                    "parameters": [
                        {
                            "name": "url",
                            "description": "Resource URL substring.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setBreakOnCSPViolation",
                    "description": "Sets breakpoint on particular CSP violations.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "violationTypes",
                            "description": "CSP Violations to stop upon.",
                            "type": "array",
                            "items": {
                                "$ref": "CSPViolationType"
                            }
                        }
                    ]
                },
                {
                    "name": "setDOMBreakpoint",
                    "description": "Sets breakpoint on particular operation with DOM.",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "description": "Identifier of the node to set breakpoint on.",
                            "$ref": "DOM.NodeId"
                        },
                        {
                            "name": "type",
                            "description": "Type of the operation to stop upon.",
                            "$ref": "DOMBreakpointType"
                        }
                    ]
                },
                {
                    "name": "setEventListenerBreakpoint",
                    "description": "Sets breakpoint on particular DOM event.",
                    "parameters": [
                        {
                            "name": "eventName",
                            "description": "DOM Event name to stop on (any DOM event will do).",
                            "type": "string"
                        },
                        {
                            "name": "targetName",
                            "description": "EventTarget interface name to stop on. If equal to `\"*\"` or not provided, will stop on any\nEventTarget.",
                            "experimental": true,
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setInstrumentationBreakpoint",
                    "description": "Sets breakpoint on particular native event.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "eventName",
                            "description": "Instrumentation name to stop on.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setXHRBreakpoint",
                    "description": "Sets breakpoint on XMLHttpRequest.",
                    "parameters": [
                        {
                            "name": "url",
                            "description": "Resource URL substring. All XHRs having this substring in the URL will get stopped upon.",
                            "type": "string"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "DOMSnapshot",
            "description": "This domain facilitates obtaining document snapshots with DOM, layout, and style information.",
            "experimental": true,
            "dependencies": [
                "CSS",
                "DOM",
                "DOMDebugger",
                "Page"
            ],
            "types": [
                {
                    "id": "DOMNode",
                    "description": "A Node in the DOM tree.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "nodeType",
                            "description": "`Node`'s nodeType.",
                            "type": "integer"
                        },
                        {
                            "name": "nodeName",
                            "description": "`Node`'s nodeName.",
                            "type": "string"
                        },
                        {
                            "name": "nodeValue",
                            "description": "`Node`'s nodeValue.",
                            "type": "string"
                        },
                        {
                            "name": "textValue",
                            "description": "Only set for textarea elements, contains the text value.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "inputValue",
                            "description": "Only set for input elements, contains the input's associated text value.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "inputChecked",
                            "description": "Only set for radio and checkbox input elements, indicates if the element has been checked",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "optionSelected",
                            "description": "Only set for option elements, indicates if the element has been selected",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "backendNodeId",
                            "description": "`Node`'s id, corresponds to DOM.Node.backendNodeId.",
                            "$ref": "DOM.BackendNodeId"
                        },
                        {
                            "name": "childNodeIndexes",
                            "description": "The indexes of the node's child nodes in the `domNodes` array returned by `getSnapshot`, if\nany.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "attributes",
                            "description": "Attributes of an `Element` node.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "NameValue"
                            }
                        },
                        {
                            "name": "pseudoElementIndexes",
                            "description": "Indexes of pseudo elements associated with this node in the `domNodes` array returned by\n`getSnapshot`, if any.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "layoutNodeIndex",
                            "description": "The index of the node's related layout tree node in the `layoutTreeNodes` array returned by\n`getSnapshot`, if any.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "documentURL",
                            "description": "Document URL that `Document` or `FrameOwner` node points to.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "baseURL",
                            "description": "Base URL that `Document` or `FrameOwner` node uses for URL completion.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "contentLanguage",
                            "description": "Only set for documents, contains the document's content language.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "documentEncoding",
                            "description": "Only set for documents, contains the document's character set encoding.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "publicId",
                            "description": "`DocumentType` node's publicId.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "systemId",
                            "description": "`DocumentType` node's systemId.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "frameId",
                            "description": "Frame ID for frame owner elements and also for the document node.",
                            "optional": true,
                            "$ref": "Page.FrameId"
                        },
                        {
                            "name": "contentDocumentIndex",
                            "description": "The index of a frame owner element's content document in the `domNodes` array returned by\n`getSnapshot`, if any.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "pseudoType",
                            "description": "Type of a pseudo element node.",
                            "optional": true,
                            "$ref": "DOM.PseudoType"
                        },
                        {
                            "name": "shadowRootType",
                            "description": "Shadow root type.",
                            "optional": true,
                            "$ref": "DOM.ShadowRootType"
                        },
                        {
                            "name": "isClickable",
                            "description": "Whether this DOM node responds to mouse clicks. This includes nodes that have had click\nevent listeners attached via JavaScript as well as anchor tags that naturally navigate when\nclicked.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "eventListeners",
                            "description": "Details of the node's event listeners, if any.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "DOMDebugger.EventListener"
                            }
                        },
                        {
                            "name": "currentSourceURL",
                            "description": "The selected url for nodes with a srcset attribute.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "originURL",
                            "description": "The url of the script (if any) that generates this node.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "scrollOffsetX",
                            "description": "Scroll offsets, set when this node is a Document.",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "scrollOffsetY",
                            "optional": true,
                            "type": "number"
                        }
                    ]
                },
                {
                    "id": "InlineTextBox",
                    "description": "Details of post layout rendered text positions. The exact layout should not be regarded as\nstable and may change between versions.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "boundingBox",
                            "description": "The bounding box in document coordinates. Note that scroll offset of the document is ignored.",
                            "$ref": "DOM.Rect"
                        },
                        {
                            "name": "startCharacterIndex",
                            "description": "The starting index in characters, for this post layout textbox substring. Characters that\nwould be represented as a surrogate pair in UTF-16 have length 2.",
                            "type": "integer"
                        },
                        {
                            "name": "numCharacters",
                            "description": "The number of characters in this post layout textbox substring. Characters that would be\nrepresented as a surrogate pair in UTF-16 have length 2.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "LayoutTreeNode",
                    "description": "Details of an element in the DOM tree with a LayoutObject.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "domNodeIndex",
                            "description": "The index of the related DOM node in the `domNodes` array returned by `getSnapshot`.",
                            "type": "integer"
                        },
                        {
                            "name": "boundingBox",
                            "description": "The bounding box in document coordinates. Note that scroll offset of the document is ignored.",
                            "$ref": "DOM.Rect"
                        },
                        {
                            "name": "layoutText",
                            "description": "Contents of the LayoutText, if any.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "inlineTextNodes",
                            "description": "The post-layout inline text nodes, if any.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "InlineTextBox"
                            }
                        },
                        {
                            "name": "styleIndex",
                            "description": "Index into the `computedStyles` array returned by `getSnapshot`.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "paintOrder",
                            "description": "Global paint order index, which is determined by the stacking order of the nodes. Nodes\nthat are painted together will have the same index. Only provided if includePaintOrder in\ngetSnapshot was true.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "isStackingContext",
                            "description": "Set to true to indicate the element begins a new stacking context.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "ComputedStyle",
                    "description": "A subset of the full ComputedStyle as defined by the request whitelist.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "properties",
                            "description": "Name/value pairs of computed style properties.",
                            "type": "array",
                            "items": {
                                "$ref": "NameValue"
                            }
                        }
                    ]
                },
                {
                    "id": "NameValue",
                    "description": "A name/value pair.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "Attribute/property name.",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "Attribute/property value.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "StringIndex",
                    "description": "Index of the string in the strings table.",
                    "type": "integer"
                },
                {
                    "id": "ArrayOfStrings",
                    "description": "Index of the string in the strings table.",
                    "type": "array",
                    "items": {
                        "$ref": "StringIndex"
                    }
                },
                {
                    "id": "RareStringData",
                    "description": "Data that is only present on rare nodes.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "index",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "value",
                            "type": "array",
                            "items": {
                                "$ref": "StringIndex"
                            }
                        }
                    ]
                },
                {
                    "id": "RareBooleanData",
                    "type": "object",
                    "properties": [
                        {
                            "name": "index",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    ]
                },
                {
                    "id": "RareIntegerData",
                    "type": "object",
                    "properties": [
                        {
                            "name": "index",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "value",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    ]
                },
                {
                    "id": "Rectangle",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                {
                    "id": "DocumentSnapshot",
                    "description": "Document snapshot.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "documentURL",
                            "description": "Document URL that `Document` or `FrameOwner` node points to.",
                            "$ref": "StringIndex"
                        },
                        {
                            "name": "title",
                            "description": "Document title.",
                            "$ref": "StringIndex"
                        },
                        {
                            "name": "baseURL",
                            "description": "Base URL that `Document` or `FrameOwner` node uses for URL completion.",
                            "$ref": "StringIndex"
                        },
                        {
                            "name": "contentLanguage",
                            "description": "Contains the document's content language.",
                            "$ref": "StringIndex"
                        },
                        {
                            "name": "encodingName",
                            "description": "Contains the document's character set encoding.",
                            "$ref": "StringIndex"
                        },
                        {
                            "name": "publicId",
                            "description": "`DocumentType` node's publicId.",
                            "$ref": "StringIndex"
                        },
                        {
                            "name": "systemId",
                            "description": "`DocumentType` node's systemId.",
                            "$ref": "StringIndex"
                        },
                        {
                            "name": "frameId",
                            "description": "Frame ID for frame owner elements and also for the document node.",
                            "$ref": "StringIndex"
                        },
                        {
                            "name": "nodes",
                            "description": "A table with dom nodes.",
                            "$ref": "NodeTreeSnapshot"
                        },
                        {
                            "name": "layout",
                            "description": "The nodes in the layout tree.",
                            "$ref": "LayoutTreeSnapshot"
                        },
                        {
                            "name": "textBoxes",
                            "description": "The post-layout inline text nodes.",
                            "$ref": "TextBoxSnapshot"
                        },
                        {
                            "name": "scrollOffsetX",
                            "description": "Horizontal scroll offset.",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "scrollOffsetY",
                            "description": "Vertical scroll offset.",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "contentWidth",
                            "description": "Document content width.",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "contentHeight",
                            "description": "Document content height.",
                            "optional": true,
                            "type": "number"
                        }
                    ]
                },
                {
                    "id": "NodeTreeSnapshot",
                    "description": "Table containing nodes.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "parentIndex",
                            "description": "Parent node index.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "nodeType",
                            "description": "`Node`'s nodeType.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "nodeName",
                            "description": "`Node`'s nodeName.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "StringIndex"
                            }
                        },
                        {
                            "name": "nodeValue",
                            "description": "`Node`'s nodeValue.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "StringIndex"
                            }
                        },
                        {
                            "name": "backendNodeId",
                            "description": "`Node`'s id, corresponds to DOM.Node.backendNodeId.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "DOM.BackendNodeId"
                            }
                        },
                        {
                            "name": "attributes",
                            "description": "Attributes of an `Element` node. Flatten name, value pairs.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "ArrayOfStrings"
                            }
                        },
                        {
                            "name": "textValue",
                            "description": "Only set for textarea elements, contains the text value.",
                            "optional": true,
                            "$ref": "RareStringData"
                        },
                        {
                            "name": "inputValue",
                            "description": "Only set for input elements, contains the input's associated text value.",
                            "optional": true,
                            "$ref": "RareStringData"
                        },
                        {
                            "name": "inputChecked",
                            "description": "Only set for radio and checkbox input elements, indicates if the element has been checked",
                            "optional": true,
                            "$ref": "RareBooleanData"
                        },
                        {
                            "name": "optionSelected",
                            "description": "Only set for option elements, indicates if the element has been selected",
                            "optional": true,
                            "$ref": "RareBooleanData"
                        },
                        {
                            "name": "contentDocumentIndex",
                            "description": "The index of the document in the list of the snapshot documents.",
                            "optional": true,
                            "$ref": "RareIntegerData"
                        },
                        {
                            "name": "pseudoType",
                            "description": "Type of a pseudo element node.",
                            "optional": true,
                            "$ref": "RareStringData"
                        },
                        {
                            "name": "isClickable",
                            "description": "Whether this DOM node responds to mouse clicks. This includes nodes that have had click\nevent listeners attached via JavaScript as well as anchor tags that naturally navigate when\nclicked.",
                            "optional": true,
                            "$ref": "RareBooleanData"
                        },
                        {
                            "name": "currentSourceURL",
                            "description": "The selected url for nodes with a srcset attribute.",
                            "optional": true,
                            "$ref": "RareStringData"
                        },
                        {
                            "name": "originURL",
                            "description": "The url of the script (if any) that generates this node.",
                            "optional": true,
                            "$ref": "RareStringData"
                        }
                    ]
                },
                {
                    "id": "LayoutTreeSnapshot",
                    "description": "Table of details of an element in the DOM tree with a LayoutObject.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "nodeIndex",
                            "description": "Index of the corresponding node in the `NodeTreeSnapshot` array returned by `captureSnapshot`.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "styles",
                            "description": "Array of indexes specifying computed style strings, filtered according to the `computedStyles` parameter passed to `captureSnapshot`.",
                            "type": "array",
                            "items": {
                                "$ref": "ArrayOfStrings"
                            }
                        },
                        {
                            "name": "bounds",
                            "description": "The absolute position bounding box.",
                            "type": "array",
                            "items": {
                                "$ref": "Rectangle"
                            }
                        },
                        {
                            "name": "text",
                            "description": "Contents of the LayoutText, if any.",
                            "type": "array",
                            "items": {
                                "$ref": "StringIndex"
                            }
                        },
                        {
                            "name": "stackingContexts",
                            "description": "Stacking context information.",
                            "$ref": "RareBooleanData"
                        },
                        {
                            "name": "paintOrders",
                            "description": "Global paint order index, which is determined by the stacking order of the nodes. Nodes\nthat are painted together will have the same index. Only provided if includePaintOrder in\ncaptureSnapshot was true.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "offsetRects",
                            "description": "The offset rect of nodes. Only available when includeDOMRects is set to true",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Rectangle"
                            }
                        },
                        {
                            "name": "scrollRects",
                            "description": "The scroll rect of nodes. Only available when includeDOMRects is set to true",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Rectangle"
                            }
                        },
                        {
                            "name": "clientRects",
                            "description": "The client rect of nodes. Only available when includeDOMRects is set to true",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Rectangle"
                            }
                        }
                    ]
                },
                {
                    "id": "TextBoxSnapshot",
                    "description": "Table of details of the post layout rendered text positions. The exact layout should not be regarded as\nstable and may change between versions.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "layoutIndex",
                            "description": "Index of the layout tree node that owns this box collection.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "bounds",
                            "description": "The absolute position bounding box.",
                            "type": "array",
                            "items": {
                                "$ref": "Rectangle"
                            }
                        },
                        {
                            "name": "start",
                            "description": "The starting index in characters, for this post layout textbox substring. Characters that\nwould be represented as a surrogate pair in UTF-16 have length 2.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        {
                            "name": "length",
                            "description": "The number of characters in this post layout textbox substring. Characters that would be\nrepresented as a surrogate pair in UTF-16 have length 2.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "disable",
                    "description": "Disables DOM snapshot agent for the given page."
                },
                {
                    "name": "enable",
                    "description": "Enables DOM snapshot agent for the given page."
                },
                {
                    "name": "getSnapshot",
                    "description": "Returns a document snapshot, including the full DOM tree of the root node (including iframes,\ntemplate contents, and imported documents) in a flattened array, as well as layout and\nwhite-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is\nflattened.",
                    "deprecated": true,
                    "parameters": [
                        {
                            "name": "computedStyleWhitelist",
                            "description": "Whitelist of computed styles to return.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "includeEventListeners",
                            "description": "Whether or not to retrieve details of DOM listeners (default false).",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "includePaintOrder",
                            "description": "Whether to determine and include the paint order index of LayoutTreeNodes (default false).",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "includeUserAgentShadowTree",
                            "description": "Whether to include UA shadow tree in the snapshot (default false).",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "domNodes",
                            "description": "The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.",
                            "type": "array",
                            "items": {
                                "$ref": "DOMNode"
                            }
                        },
                        {
                            "name": "layoutTreeNodes",
                            "description": "The nodes in the layout tree.",
                            "type": "array",
                            "items": {
                                "$ref": "LayoutTreeNode"
                            }
                        },
                        {
                            "name": "computedStyles",
                            "description": "Whitelisted ComputedStyle properties for each node in the layout tree.",
                            "type": "array",
                            "items": {
                                "$ref": "ComputedStyle"
                            }
                        }
                    ]
                },
                {
                    "name": "captureSnapshot",
                    "description": "Returns a document snapshot, including the full DOM tree of the root node (including iframes,\ntemplate contents, and imported documents) in a flattened array, as well as layout and\nwhite-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is\nflattened.",
                    "parameters": [
                        {
                            "name": "computedStyles",
                            "description": "Whitelist of computed styles to return.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "includePaintOrder",
                            "description": "Whether to include layout object paint orders into the snapshot.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "includeDOMRects",
                            "description": "Whether to include DOM rectangles (offsetRects, clientRects, scrollRects) into the snapshot",
                            "optional": true,
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "documents",
                            "description": "The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.",
                            "type": "array",
                            "items": {
                                "$ref": "DocumentSnapshot"
                            }
                        },
                        {
                            "name": "strings",
                            "description": "Shared string table that all string properties refer to with indexes.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "domain": "DOMStorage",
            "description": "Query and modify DOM storage.",
            "experimental": true,
            "types": [
                {
                    "id": "StorageId",
                    "description": "DOM Storage identifier.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "securityOrigin",
                            "description": "Security origin for the storage.",
                            "type": "string"
                        },
                        {
                            "name": "isLocalStorage",
                            "description": "Whether the storage is local storage (not session storage).",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "Item",
                    "description": "DOM Storage item.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ],
            "commands": [
                {
                    "name": "clear",
                    "parameters": [
                        {
                            "name": "storageId",
                            "$ref": "StorageId"
                        }
                    ]
                },
                {
                    "name": "disable",
                    "description": "Disables storage tracking, prevents storage events from being sent to the client."
                },
                {
                    "name": "enable",
                    "description": "Enables storage tracking, storage events will now be delivered to the client."
                },
                {
                    "name": "getDOMStorageItems",
                    "parameters": [
                        {
                            "name": "storageId",
                            "$ref": "StorageId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "entries",
                            "type": "array",
                            "items": {
                                "$ref": "Item"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDOMStorageItem",
                    "parameters": [
                        {
                            "name": "storageId",
                            "$ref": "StorageId"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setDOMStorageItem",
                    "parameters": [
                        {
                            "name": "storageId",
                            "$ref": "StorageId"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "domStorageItemAdded",
                    "parameters": [
                        {
                            "name": "storageId",
                            "$ref": "StorageId"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "newValue",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "domStorageItemRemoved",
                    "parameters": [
                        {
                            "name": "storageId",
                            "$ref": "StorageId"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "domStorageItemUpdated",
                    "parameters": [
                        {
                            "name": "storageId",
                            "$ref": "StorageId"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "oldValue",
                            "type": "string"
                        },
                        {
                            "name": "newValue",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "domStorageItemsCleared",
                    "parameters": [
                        {
                            "name": "storageId",
                            "$ref": "StorageId"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Database",
            "experimental": true,
            "types": [
                {
                    "id": "DatabaseId",
                    "description": "Unique identifier of Database object.",
                    "type": "string"
                },
                {
                    "id": "Database",
                    "description": "Database object.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "id",
                            "description": "Database ID.",
                            "$ref": "DatabaseId"
                        },
                        {
                            "name": "domain",
                            "description": "Database domain.",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "description": "Database name.",
                            "type": "string"
                        },
                        {
                            "name": "version",
                            "description": "Database version.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "Error",
                    "description": "Database error.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "message",
                            "description": "Error message.",
                            "type": "string"
                        },
                        {
                            "name": "code",
                            "description": "Error code.",
                            "type": "integer"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "disable",
                    "description": "Disables database tracking, prevents database events from being sent to the client."
                },
                {
                    "name": "enable",
                    "description": "Enables database tracking, database events will now be delivered to the client."
                },
                {
                    "name": "executeSQL",
                    "parameters": [
                        {
                            "name": "databaseId",
                            "$ref": "DatabaseId"
                        },
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "columnNames",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "values",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "any"
                            }
                        },
                        {
                            "name": "sqlError",
                            "optional": true,
                            "$ref": "Error"
                        }
                    ]
                },
                {
                    "name": "getDatabaseTableNames",
                    "parameters": [
                        {
                            "name": "databaseId",
                            "$ref": "DatabaseId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "tableNames",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "addDatabase",
                    "parameters": [
                        {
                            "name": "database",
                            "$ref": "Database"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "DeviceOrientation",
            "experimental": true,
            "commands": [
                {
                    "name": "clearDeviceOrientationOverride",
                    "description": "Clears the overridden Device Orientation."
                },
                {
                    "name": "setDeviceOrientationOverride",
                    "description": "Overrides the Device Orientation.",
                    "parameters": [
                        {
                            "name": "alpha",
                            "description": "Mock alpha",
                            "type": "number"
                        },
                        {
                            "name": "beta",
                            "description": "Mock beta",
                            "type": "number"
                        },
                        {
                            "name": "gamma",
                            "description": "Mock gamma",
                            "type": "number"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Emulation",
            "description": "This domain emulates different environments for the page.",
            "dependencies": [
                "DOM",
                "Page",
                "Runtime"
            ],
            "types": [
                {
                    "id": "ScreenOrientation",
                    "description": "Screen orientation.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "type",
                            "description": "Orientation type.",
                            "type": "string",
                            "enum": [
                                "portraitPrimary",
                                "portraitSecondary",
                                "landscapePrimary",
                                "landscapeSecondary"
                            ]
                        },
                        {
                            "name": "angle",
                            "description": "Orientation angle.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "DisplayFeature",
                    "type": "object",
                    "properties": [
                        {
                            "name": "orientation",
                            "description": "Orientation of a display feature in relation to screen",
                            "type": "string",
                            "enum": [
                                "vertical",
                                "horizontal"
                            ]
                        },
                        {
                            "name": "offset",
                            "description": "The offset from the screen origin in either the x (for vertical\norientation) or y (for horizontal orientation) direction.",
                            "type": "integer"
                        },
                        {
                            "name": "maskLength",
                            "description": "A display feature may mask content such that it is not physically\ndisplayed - this length along with the offset describes this area.\nA display feature that only splits content will have a 0 mask_length.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "MediaFeature",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "VirtualTimePolicy",
                    "description": "advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to\nallow the next delayed task (if any) to run; pause: The virtual time base may not advance;\npauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending\nresource fetches.",
                    "experimental": true,
                    "type": "string",
                    "enum": [
                        "advance",
                        "pause",
                        "pauseIfNetworkFetchesPending"
                    ]
                },
                {
                    "id": "UserAgentBrandVersion",
                    "description": "Used to specify User Agent Cient Hints to emulate. See https://wicg.github.io/ua-client-hints",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        {
                            "name": "brand",
                            "type": "string"
                        },
                        {
                            "name": "version",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "UserAgentMetadata",
                    "description": "Used to specify User Agent Cient Hints to emulate. See https://wicg.github.io/ua-client-hints\nMissing optional values will be filled in by the target with what it would normally use.",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        {
                            "name": "brands",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "UserAgentBrandVersion"
                            }
                        },
                        {
                            "name": "fullVersion",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "platform",
                            "type": "string"
                        },
                        {
                            "name": "platformVersion",
                            "type": "string"
                        },
                        {
                            "name": "architecture",
                            "type": "string"
                        },
                        {
                            "name": "model",
                            "type": "string"
                        },
                        {
                            "name": "mobile",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "DisabledImageType",
                    "description": "Enum of image types that can be disabled.",
                    "experimental": true,
                    "type": "string",
                    "enum": [
                        "avif",
                        "webp"
                    ]
                }
            ],
            "commands": [
                {
                    "name": "canEmulate",
                    "description": "Tells whether emulation is supported.",
                    "returns": [
                        {
                            "name": "result",
                            "description": "True if emulation is supported.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "clearDeviceMetricsOverride",
                    "description": "Clears the overriden device metrics."
                },
                {
                    "name": "clearGeolocationOverride",
                    "description": "Clears the overriden Geolocation Position and Error."
                },
                {
                    "name": "resetPageScaleFactor",
                    "description": "Requests that page scale factor is reset to initial values.",
                    "experimental": true
                },
                {
                    "name": "setFocusEmulationEnabled",
                    "description": "Enables or disables simulating a focused and active page.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "enabled",
                            "description": "Whether to enable to disable focus emulation.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "setCPUThrottlingRate",
                    "description": "Enables CPU throttling to emulate slow CPUs.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "rate",
                            "description": "Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).",
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "setDefaultBackgroundColorOverride",
                    "description": "Sets or clears an override of the default background color of the frame. This override is used\nif the content does not specify one.",
                    "parameters": [
                        {
                            "name": "color",
                            "description": "RGBA of the default background color. If not specified, any existing override will be\ncleared.",
                            "optional": true,
                            "$ref": "DOM.RGBA"
                        }
                    ]
                },
                {
                    "name": "setDeviceMetricsOverride",
                    "description": "Overrides the values of device screen dimensions (window.screen.width, window.screen.height,\nwindow.innerWidth, window.innerHeight, and \"device-width\"/\"device-height\"-related CSS media\nquery results).",
                    "parameters": [
                        {
                            "name": "width",
                            "description": "Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.",
                            "type": "integer"
                        },
                        {
                            "name": "height",
                            "description": "Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.",
                            "type": "integer"
                        },
                        {
                            "name": "deviceScaleFactor",
                            "description": "Overriding device scale factor value. 0 disables the override.",
                            "type": "number"
                        },
                        {
                            "name": "mobile",
                            "description": "Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text\nautosizing and more.",
                            "type": "boolean"
                        },
                        {
                            "name": "scale",
                            "description": "Scale to apply to resulting view image.",
                            "experimental": true,
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "screenWidth",
                            "description": "Overriding screen width value in pixels (minimum 0, maximum 10000000).",
                            "experimental": true,
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "screenHeight",
                            "description": "Overriding screen height value in pixels (minimum 0, maximum 10000000).",
                            "experimental": true,
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "positionX",
                            "description": "Overriding view X position on screen in pixels (minimum 0, maximum 10000000).",
                            "experimental": true,
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "positionY",
                            "description": "Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).",
                            "experimental": true,
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "dontSetVisibleSize",
                            "description": "Do not set visible view size, rely upon explicit setVisibleSize call.",
                            "experimental": true,
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "screenOrientation",
                            "description": "Screen orientation override.",
                            "optional": true,
                            "$ref": "ScreenOrientation"
                        },
                        {
                            "name": "viewport",
                            "description": "If set, the visible area of the page will be overridden to this viewport. This viewport\nchange is not observed by the page, e.g. viewport-relative elements do not change positions.",
                            "experimental": true,
                            "optional": true,
                            "$ref": "Page.Viewport"
                        },
                        {
                            "name": "displayFeature",
                            "description": "If set, the display feature of a multi-segment screen. If not set, multi-segment support\nis turned-off.",
                            "experimental": true,
                            "optional": true,
                            "$ref": "DisplayFeature"
                        }
                    ]
                },
                {
                    "name": "setScrollbarsHidden",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "hidden",
                            "description": "Whether scrollbars should be always hidden.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "setDocumentCookieDisabled",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "disabled",
                            "description": "Whether document.coookie API should be disabled.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "setEmitTouchEventsForMouse",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "enabled",
                            "description": "Whether touch emulation based on mouse input should be enabled.",
                            "type": "boolean"
                        },
                        {
                            "name": "configuration",
                            "description": "Touch/gesture events configuration. Default: current platform.",
                            "optional": true,
                            "type": "string",
                            "enum": [
                                "mobile",
                                "desktop"
                            ]
                        }
                    ]
                },
                {
                    "name": "setEmulatedMedia",
                    "description": "Emulates the given media type or media feature for CSS media queries.",
                    "parameters": [
                        {
                            "name": "media",
                            "description": "Media type to emulate. Empty string disables the override.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "features",
                            "description": "Media features to emulate.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "MediaFeature"
                            }
                        }
                    ]
                },
                {
                    "name": "setEmulatedVisionDeficiency",
                    "description": "Emulates the given vision deficiency.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "type",
                            "description": "Vision deficiency to emulate.",
                            "type": "string",
                            "enum": [
                                "none",
                                "achromatopsia",
                                "blurredVision",
                                "deuteranopia",
                                "protanopia",
                                "tritanopia"
                            ]
                        }
                    ]
                },
                {
                    "name": "setGeolocationOverride",
                    "description": "Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position\nunavailable.",
                    "parameters": [
                        {
                            "name": "latitude",
                            "description": "Mock latitude",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "longitude",
                            "description": "Mock longitude",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "accuracy",
                            "description": "Mock accuracy",
                            "optional": true,
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "setIdleOverride",
                    "description": "Overrides the Idle state.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "isUserActive",
                            "description": "Mock isUserActive",
                            "type": "boolean"
                        },
                        {
                            "name": "isScreenUnlocked",
                            "description": "Mock isScreenUnlocked",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "clearIdleOverride",
                    "description": "Clears Idle state overrides.",
                    "experimental": true
                },
                {
                    "name": "setNavigatorOverrides",
                    "description": "Overrides value returned by the javascript navigator object.",
                    "experimental": true,
                    "deprecated": true,
                    "parameters": [
                        {
                            "name": "platform",
                            "description": "The platform navigator.platform should return.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setPageScaleFactor",
                    "description": "Sets a specified page scale factor.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "pageScaleFactor",
                            "description": "Page scale factor.",
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "setScriptExecutionDisabled",
                    "description": "Switches script execution in the page.",
                    "parameters": [
                        {
                            "name": "value",
                            "description": "Whether script execution should be disabled in the page.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "setTouchEmulationEnabled",
                    "description": "Enables touch on platforms which do not support them.",
                    "parameters": [
                        {
                            "name": "enabled",
                            "description": "Whether the touch event emulation should be enabled.",
                            "type": "boolean"
                        },
                        {
                            "name": "maxTouchPoints",
                            "description": "Maximum touch points supported. Defaults to one.",
                            "optional": true,
                            "type": "integer"
                        }
                    ]
                },
                {
                    "name": "setVirtualTimePolicy",
                    "description": "Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets\nthe current virtual time policy.  Note this supersedes any previous time budget.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "policy",
                            "$ref": "VirtualTimePolicy"
                        },
                        {
                            "name": "budget",
                            "description": "If set, after this many virtual milliseconds have elapsed virtual time will be paused and a\nvirtualTimeBudgetExpired event is sent.",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "maxVirtualTimeTaskStarvationCount",
                            "description": "If set this specifies the maximum number of tasks that can be run before virtual is forced\nforwards to prevent deadlock.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "waitForNavigation",
                            "description": "If set the virtual time policy change should be deferred until any frame starts navigating.\nNote any previous deferred policy change is superseded.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "initialVirtualTime",
                            "description": "If set, base::Time::Now will be overriden to initially return this value.",
                            "optional": true,
                            "$ref": "Network.TimeSinceEpoch"
                        }
                    ],
                    "returns": [
                        {
                            "name": "virtualTimeTicksBase",
                            "description": "Absolute timestamp at which virtual time was first enabled (up time in milliseconds).",
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "setLocaleOverride",
                    "description": "Overrides default host system locale with the specified one.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "locale",
                            "description": "ICU style C locale (e.g. \"en_US\"). If not specified or empty, disables the override and\nrestores default host system locale.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setTimezoneOverride",
                    "description": "Overrides default host system timezone with the specified one.",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "timezoneId",
                            "description": "The timezone identifier. If empty, disables the override and\nrestores default host system timezone.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "setVisibleSize",
                    "description": "Resizes the frame/viewport of the page. Note that this does not affect the frame's container\n(e.g. browser window). Can be used to produce screenshots of the specified size. Not supported\non Android.",
                    "experimental": true,
                    "deprecated": true,
                    "parameters": [
                        {
                            "name": "width",
                            "description": "Frame width (DIP).",
                            "type": "integer"
                        },
                        {
                            "name": "height",
                            "description": "Frame height (DIP).",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "name": "setDisabledImageTypes",
                    "experimental": true,
                    "parameters": [
                        {
                            "name": "imageTypes",
                            "description": "Image types to disable.",
                            "type": "array",
                            "items": {
                                "$ref": "DisabledImageType"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserAgentOverride",
                    "description": "Allows overriding user agent with the given string.",
                    "parameters": [
                        {
                            "name": "userAgent",
                            "description": "User agent to use.",
                            "type": "string"
                        },
                        {
                            "name": "acceptLanguage",
                            "description": "Browser langugage to emulate.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "platform",
                            "description": "The platform navigator.platform should return.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "userAgentMetadata",
                            "description": "To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData",
                            "experimental": true,
                            "optional": true,
                            "$ref": "UserAgentMetadata"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "virtualTimeBudgetExpired",
                    "description": "Notification sent after the virtual time budget for the current VirtualTimePolicy has run out.",
                    "experimental": true
                }
            ]
        },
        {
            "domain": "HeadlessExperimental",
            "description": "This domain provides experimental commands only supported in headless mode.",
            "experimental": true,
            "dependencies": [
                "Page",
                "Runtime"
            ],
            "types": [
                {
                    "id": "ScreenshotParams",
                    "description": "Encoding options for a screenshot.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "format",
                            "description": "Image compression format (defaults to png).",
                            "optional": true,
                            "type": "string",
                            "enum": [
                                "jpeg",
                                "png"
                            ]
                        },
                        {
                            "name": "quality",
                            "description": "Compression quality from range [0..100] (jpeg only).",
                            "optional": true,
                            "type": "integer"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "beginFrame",
                    "description": "Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a\nscreenshot from the resulting frame. Requires that the target was created with enabled\nBeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also\nhttps://goo.gl/3zHXhB for more background.",
                    "parameters": [
                        {
                            "name": "frameTimeTicks",
                            "description": "Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set,\nthe current time will be used.",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "interval",
                            "description": "The interval between BeginFrames that is reported to the compositor, in milliseconds.\nDefaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.",
                            "optional": true,
                            "type": "number"
                        },
                        {
                            "name": "noDisplayUpdates",
                            "description": "Whether updates should not be committed and drawn onto the display. False by default. If\ntrue, only side effects of the BeginFrame will be run, such as layout and animations, but\nany visual updates may not be visible on the display or in screenshots.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "screenshot",
                            "description": "If set, a screenshot of the frame will be captured and returned in the response. Otherwise,\nno screenshot will be captured. Note that capturing a screenshot can fail, for example,\nduring renderer initialization. In such a case, no screenshot data will be returned.",
                            "optional": true,
                            "$ref": "ScreenshotParams"
                        }
                    ],
                    "returns": [
                        {
                            "name": "hasDamage",
                            "description": "Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the\ndisplay. Reported for diagnostic uses, may be removed in the future.",
                            "type": "boolean"
                        },
                        {
                            "name": "screenshotData",
                            "description": "Base64-encoded image data of the screenshot, if one was requested and successfully taken. (Encoded as a base64 string when passed over JSON)",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "disable",
                    "description": "Disables headless events for the target."
                },
                {
                    "name": "enable",
                    "description": "Enables headless events for the target."
                }
            ],
            "events": [
                {
                    "name": "needsBeginFramesChanged",
                    "description": "Issued when the target starts or stops needing BeginFrames.\nDeprecated. Issue beginFrame unconditionally instead and use result from\nbeginFrame to detect whether the frames were suppressed.",
                    "